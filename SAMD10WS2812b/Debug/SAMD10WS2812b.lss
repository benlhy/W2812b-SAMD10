
SAMD10WS2812b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000018dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  20000070  0000194c  00020070  2**2
                  ALLOC
  3 .stack        00000400  20000108  000019e4  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00017aa9  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002511  00000000  00000000  00037b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005d8f  00000000  00000000  0003a0ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000420  00000000  00000000  0003fe3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000798  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014afd  00000000  00000000  000409f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000979f  00000000  00000000  000554ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e5ef  00000000  00000000  0005ec8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000bb4  00000000  00000000  000cd280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20000508 	.word	0x20000508
       4:	00000ef5 	.word	0x00000ef5
       8:	00000ef1 	.word	0x00000ef1
       c:	00000ef1 	.word	0x00000ef1
	...
      2c:	00000ef1 	.word	0x00000ef1
	...
      38:	00000ef1 	.word	0x00000ef1
      3c:	00000ef1 	.word	0x00000ef1
      40:	00000ef1 	.word	0x00000ef1
      44:	00000ef1 	.word	0x00000ef1
      48:	00000ef1 	.word	0x00000ef1
      4c:	00000ef1 	.word	0x00000ef1
      50:	00000ef1 	.word	0x00000ef1
      54:	00000ef1 	.word	0x00000ef1
      58:	00000ef1 	.word	0x00000ef1
      5c:	00000000 	.word	0x00000000
      60:	00000ef1 	.word	0x00000ef1
      64:	000002f5 	.word	0x000002f5
      68:	00000305 	.word	0x00000305
      6c:	00000315 	.word	0x00000315
      70:	00000ef1 	.word	0x00000ef1
      74:	00000ed1 	.word	0x00000ed1
      78:	00000ee1 	.word	0x00000ee1
      7c:	00000ef1 	.word	0x00000ef1
      80:	00000ef1 	.word	0x00000ef1
      84:	00000ef1 	.word	0x00000ef1
      88:	00000ef1 	.word	0x00000ef1

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000070 	.word	0x20000070
      ac:	00000000 	.word	0x00000000
      b0:	000018dc 	.word	0x000018dc

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000074 	.word	0x20000074
      e0:	000018dc 	.word	0x000018dc
      e4:	000018dc 	.word	0x000018dc
      e8:	00000000 	.word	0x00000000

000000ec <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
      ee:	2000      	movs	r0, #0
      f0:	4b08      	ldr	r3, [pc, #32]	; (114 <delay_init+0x28>)
      f2:	4798      	blx	r3
      f4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
      f6:	4c08      	ldr	r4, [pc, #32]	; (118 <delay_init+0x2c>)
      f8:	21fa      	movs	r1, #250	; 0xfa
      fa:	0089      	lsls	r1, r1, #2
      fc:	47a0      	blx	r4
      fe:	4b07      	ldr	r3, [pc, #28]	; (11c <delay_init+0x30>)
     100:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     102:	4907      	ldr	r1, [pc, #28]	; (120 <delay_init+0x34>)
     104:	0028      	movs	r0, r5
     106:	47a0      	blx	r4
     108:	4b06      	ldr	r3, [pc, #24]	; (124 <delay_init+0x38>)
     10a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     10c:	2205      	movs	r2, #5
     10e:	4b06      	ldr	r3, [pc, #24]	; (128 <delay_init+0x3c>)
     110:	601a      	str	r2, [r3, #0]
}
     112:	bd70      	pop	{r4, r5, r6, pc}
     114:	00000c05 	.word	0x00000c05
     118:	00001349 	.word	0x00001349
     11c:	20000004 	.word	0x20000004
     120:	000f4240 	.word	0x000f4240
     124:	20000000 	.word	0x20000000
     128:	e000e010 	.word	0xe000e010

0000012c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     12c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     12e:	4b08      	ldr	r3, [pc, #32]	; (150 <delay_cycles_us+0x24>)
     130:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     132:	4a08      	ldr	r2, [pc, #32]	; (154 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     134:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     136:	2180      	movs	r1, #128	; 0x80
     138:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     13a:	e006      	b.n	14a <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     13c:	2c00      	cmp	r4, #0
     13e:	d004      	beq.n	14a <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     140:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     142:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     144:	6813      	ldr	r3, [r2, #0]
     146:	420b      	tst	r3, r1
     148:	d0fc      	beq.n	144 <delay_cycles_us+0x18>
     14a:	3801      	subs	r0, #1
     14c:	d2f6      	bcs.n	13c <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     14e:	bd30      	pop	{r4, r5, pc}
     150:	20000000 	.word	0x20000000
     154:	e000e010 	.word	0xe000e010

00000158 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     158:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     15a:	4b08      	ldr	r3, [pc, #32]	; (17c <delay_cycles_ms+0x24>)
     15c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15e:	4a08      	ldr	r2, [pc, #32]	; (180 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     160:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     162:	2180      	movs	r1, #128	; 0x80
     164:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     166:	e006      	b.n	176 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     168:	2c00      	cmp	r4, #0
     16a:	d004      	beq.n	176 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     16c:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16e:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     170:	6813      	ldr	r3, [r2, #0]
     172:	420b      	tst	r3, r1
     174:	d0fc      	beq.n	170 <delay_cycles_ms+0x18>
     176:	3801      	subs	r0, #1
     178:	d2f6      	bcs.n	168 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     17a:	bd30      	pop	{r4, r5, pc}
     17c:	20000004 	.word	0x20000004
     180:	e000e010 	.word	0xe000e010

00000184 <_sercom_get_sync_baud_val>:
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     184:	b510      	push	{r4, lr}
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     186:	0849      	lsrs	r1, r1, #1
     188:	2340      	movs	r3, #64	; 0x40
     18a:	2400      	movs	r4, #0
     18c:	4281      	cmp	r1, r0
     18e:	d201      	bcs.n	194 <_sercom_get_sync_baud_val+0x10>
     190:	e00a      	b.n	1a8 <_sercom_get_sync_baud_val+0x24>
     192:	001c      	movs	r4, r3
     194:	1a09      	subs	r1, r1, r0
     196:	1c63      	adds	r3, r4, #1
     198:	b29b      	uxth	r3, r3
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     19a:	4288      	cmp	r0, r1
     19c:	d9f9      	bls.n	192 <_sercom_get_sync_baud_val+0xe>
     19e:	2340      	movs	r3, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     1a0:	2cff      	cmp	r4, #255	; 0xff
     1a2:	d801      	bhi.n	1a8 <_sercom_get_sync_baud_val+0x24>
     1a4:	8014      	strh	r4, [r2, #0]
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     1a6:	2300      	movs	r3, #0
     1a8:	0018      	movs	r0, r3
	}

	*baudval = baud_calculated;
     1aa:	bd10      	pop	{r4, pc}

000001ac <sercom_set_gclk_generator>:
     1ac:	b510      	push	{r4, lr}
	return STATUS_OK;
     1ae:	b082      	sub	sp, #8
}
     1b0:	0004      	movs	r4, r0
     1b2:	4b0e      	ldr	r3, [pc, #56]	; (1ec <sercom_set_gclk_generator+0x40>)
     1b4:	781b      	ldrb	r3, [r3, #0]
     1b6:	2b00      	cmp	r3, #0
     1b8:	d001      	beq.n	1be <sercom_set_gclk_generator+0x12>
     1ba:	2900      	cmp	r1, #0
     1bc:	d00d      	beq.n	1da <sercom_set_gclk_generator+0x2e>
     1be:	a901      	add	r1, sp, #4
     1c0:	700c      	strb	r4, [r1, #0]
     1c2:	200d      	movs	r0, #13
     1c4:	4b0a      	ldr	r3, [pc, #40]	; (1f0 <sercom_set_gclk_generator+0x44>)
     1c6:	4798      	blx	r3
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     1c8:	200d      	movs	r0, #13
     1ca:	4b0a      	ldr	r3, [pc, #40]	; (1f4 <sercom_set_gclk_generator+0x48>)
     1cc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     1ce:	4b07      	ldr	r3, [pc, #28]	; (1ec <sercom_set_gclk_generator+0x40>)
     1d0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     1d2:	2201      	movs	r2, #1
     1d4:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     1d6:	2000      	movs	r0, #0
     1d8:	e006      	b.n	1e8 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     1da:	4b04      	ldr	r3, [pc, #16]	; (1ec <sercom_set_gclk_generator+0x40>)
     1dc:	785b      	ldrb	r3, [r3, #1]
     1de:	4283      	cmp	r3, r0
     1e0:	d001      	beq.n	1e6 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     1e2:	201d      	movs	r0, #29
     1e4:	e000      	b.n	1e8 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     1e6:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     1e8:	b002      	add	sp, #8
     1ea:	bd10      	pop	{r4, pc}
     1ec:	2000008c 	.word	0x2000008c
     1f0:	00000d1d 	.word	0x00000d1d
     1f4:	00000c91 	.word	0x00000c91

000001f8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     1f8:	4b21      	ldr	r3, [pc, #132]	; (280 <_sercom_get_default_pad+0x88>)
     1fa:	4298      	cmp	r0, r3
     1fc:	d016      	beq.n	22c <_sercom_get_default_pad+0x34>
     1fe:	4b21      	ldr	r3, [pc, #132]	; (284 <_sercom_get_default_pad+0x8c>)
     200:	4298      	cmp	r0, r3
     202:	d024      	beq.n	24e <_sercom_get_default_pad+0x56>
     204:	4b20      	ldr	r3, [pc, #128]	; (288 <_sercom_get_default_pad+0x90>)
     206:	4298      	cmp	r0, r3
     208:	d132      	bne.n	270 <_sercom_get_default_pad+0x78>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     20a:	2901      	cmp	r1, #1
     20c:	d006      	beq.n	21c <_sercom_get_default_pad+0x24>
     20e:	2900      	cmp	r1, #0
     210:	d030      	beq.n	274 <_sercom_get_default_pad+0x7c>
     212:	2902      	cmp	r1, #2
     214:	d006      	beq.n	224 <_sercom_get_default_pad+0x2c>
     216:	2903      	cmp	r1, #3
     218:	d006      	beq.n	228 <_sercom_get_default_pad+0x30>
     21a:	e001      	b.n	220 <_sercom_get_default_pad+0x28>
     21c:	481b      	ldr	r0, [pc, #108]	; (28c <_sercom_get_default_pad+0x94>)
     21e:	e02e      	b.n	27e <_sercom_get_default_pad+0x86>
	}

	Assert(false);
	return 0;
     220:	2000      	movs	r0, #0
     222:	e02c      	b.n	27e <_sercom_get_default_pad+0x86>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     224:	481a      	ldr	r0, [pc, #104]	; (290 <_sercom_get_default_pad+0x98>)
     226:	e02a      	b.n	27e <_sercom_get_default_pad+0x86>
     228:	481a      	ldr	r0, [pc, #104]	; (294 <_sercom_get_default_pad+0x9c>)
     22a:	e028      	b.n	27e <_sercom_get_default_pad+0x86>
     22c:	2901      	cmp	r1, #1
     22e:	d006      	beq.n	23e <_sercom_get_default_pad+0x46>
     230:	2900      	cmp	r1, #0
     232:	d021      	beq.n	278 <_sercom_get_default_pad+0x80>
     234:	2902      	cmp	r1, #2
     236:	d006      	beq.n	246 <_sercom_get_default_pad+0x4e>
     238:	2903      	cmp	r1, #3
     23a:	d006      	beq.n	24a <_sercom_get_default_pad+0x52>
     23c:	e001      	b.n	242 <_sercom_get_default_pad+0x4a>
     23e:	4816      	ldr	r0, [pc, #88]	; (298 <_sercom_get_default_pad+0xa0>)
     240:	e01d      	b.n	27e <_sercom_get_default_pad+0x86>
	}

	Assert(false);
	return 0;
     242:	2000      	movs	r0, #0
     244:	e01b      	b.n	27e <_sercom_get_default_pad+0x86>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     246:	4815      	ldr	r0, [pc, #84]	; (29c <_sercom_get_default_pad+0xa4>)
     248:	e019      	b.n	27e <_sercom_get_default_pad+0x86>
     24a:	4815      	ldr	r0, [pc, #84]	; (2a0 <_sercom_get_default_pad+0xa8>)
     24c:	e017      	b.n	27e <_sercom_get_default_pad+0x86>
     24e:	2901      	cmp	r1, #1
     250:	d006      	beq.n	260 <_sercom_get_default_pad+0x68>
     252:	2900      	cmp	r1, #0
     254:	d012      	beq.n	27c <_sercom_get_default_pad+0x84>
     256:	2902      	cmp	r1, #2
     258:	d006      	beq.n	268 <_sercom_get_default_pad+0x70>
     25a:	2903      	cmp	r1, #3
     25c:	d006      	beq.n	26c <_sercom_get_default_pad+0x74>
     25e:	e001      	b.n	264 <_sercom_get_default_pad+0x6c>
     260:	4810      	ldr	r0, [pc, #64]	; (2a4 <_sercom_get_default_pad+0xac>)
     262:	e00c      	b.n	27e <_sercom_get_default_pad+0x86>
	}

	Assert(false);
	return 0;
     264:	2000      	movs	r0, #0
     266:	e00a      	b.n	27e <_sercom_get_default_pad+0x86>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     268:	480f      	ldr	r0, [pc, #60]	; (2a8 <_sercom_get_default_pad+0xb0>)
     26a:	e008      	b.n	27e <_sercom_get_default_pad+0x86>
     26c:	480f      	ldr	r0, [pc, #60]	; (2ac <_sercom_get_default_pad+0xb4>)
     26e:	e006      	b.n	27e <_sercom_get_default_pad+0x86>
	}

	Assert(false);
	return 0;
     270:	2000      	movs	r0, #0
     272:	e004      	b.n	27e <_sercom_get_default_pad+0x86>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     274:	480e      	ldr	r0, [pc, #56]	; (2b0 <_sercom_get_default_pad+0xb8>)
     276:	e002      	b.n	27e <_sercom_get_default_pad+0x86>
     278:	480e      	ldr	r0, [pc, #56]	; (2b4 <_sercom_get_default_pad+0xbc>)
     27a:	e000      	b.n	27e <_sercom_get_default_pad+0x86>
     27c:	480e      	ldr	r0, [pc, #56]	; (2b8 <_sercom_get_default_pad+0xc0>)
	}

	Assert(false);
	return 0;
}
     27e:	4770      	bx	lr
     280:	42000c00 	.word	0x42000c00
     284:	42001000 	.word	0x42001000
     288:	42000800 	.word	0x42000800
     28c:	00050003 	.word	0x00050003
     290:	00060003 	.word	0x00060003
     294:	00070003 	.word	0x00070003
     298:	00170002 	.word	0x00170002
     29c:	001e0003 	.word	0x001e0003
     2a0:	001f0003 	.word	0x001f0003
     2a4:	00170003 	.word	0x00170003
     2a8:	00100003 	.word	0x00100003
     2ac:	00190003 	.word	0x00190003
     2b0:	00040003 	.word	0x00040003
     2b4:	00160002 	.word	0x00160002
     2b8:	00160003 	.word	0x00160003

000002bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     2bc:	b530      	push	{r4, r5, lr}
     2be:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     2c0:	aa01      	add	r2, sp, #4
     2c2:	4b0b      	ldr	r3, [pc, #44]	; (2f0 <_sercom_get_sercom_inst_index+0x34>)
     2c4:	cb32      	ldmia	r3!, {r1, r4, r5}
     2c6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     2c8:	0003      	movs	r3, r0
     2ca:	9a01      	ldr	r2, [sp, #4]
     2cc:	4282      	cmp	r2, r0
     2ce:	d00a      	beq.n	2e6 <_sercom_get_sercom_inst_index+0x2a>
     2d0:	9a02      	ldr	r2, [sp, #8]
     2d2:	4282      	cmp	r2, r0
     2d4:	d005      	beq.n	2e2 <_sercom_get_sercom_inst_index+0x26>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     2d6:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     2d8:	9a03      	ldr	r2, [sp, #12]
     2da:	429a      	cmp	r2, r3
     2dc:	d105      	bne.n	2ea <_sercom_get_sercom_inst_index+0x2e>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     2de:	3002      	adds	r0, #2
     2e0:	e002      	b.n	2e8 <_sercom_get_sercom_inst_index+0x2c>
     2e2:	2001      	movs	r0, #1
     2e4:	e000      	b.n	2e8 <_sercom_get_sercom_inst_index+0x2c>
     2e6:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     2e8:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     2ea:	b005      	add	sp, #20
     2ec:	bd30      	pop	{r4, r5, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	00001844 	.word	0x00001844

000002f4 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     2f4:	b510      	push	{r4, lr}
     2f6:	4b02      	ldr	r3, [pc, #8]	; (300 <SERCOM0_Handler+0xc>)
     2f8:	681b      	ldr	r3, [r3, #0]
     2fa:	2000      	movs	r0, #0
     2fc:	4798      	blx	r3
     2fe:	bd10      	pop	{r4, pc}
     300:	20000090 	.word	0x20000090

00000304 <SERCOM1_Handler>:
     304:	b510      	push	{r4, lr}
     306:	4b02      	ldr	r3, [pc, #8]	; (310 <SERCOM1_Handler+0xc>)
     308:	685b      	ldr	r3, [r3, #4]
     30a:	2001      	movs	r0, #1
     30c:	4798      	blx	r3
     30e:	bd10      	pop	{r4, pc}
     310:	20000090 	.word	0x20000090

00000314 <SERCOM2_Handler>:
     314:	b510      	push	{r4, lr}
     316:	4b02      	ldr	r3, [pc, #8]	; (320 <SERCOM2_Handler+0xc>)
     318:	689b      	ldr	r3, [r3, #8]
     31a:	2002      	movs	r0, #2
     31c:	4798      	blx	r3
     31e:	bd10      	pop	{r4, pc}
     320:	20000090 	.word	0x20000090

00000324 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     324:	b5f0      	push	{r4, r5, r6, r7, lr}
     326:	4657      	mov	r7, sl
     328:	464e      	mov	r6, r9
     32a:	4645      	mov	r5, r8
     32c:	b4e0      	push	{r5, r6, r7}
     32e:	b088      	sub	sp, #32
     330:	4680      	mov	r8, r0
     332:	000e      	movs	r6, r1
     334:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     336:	0003      	movs	r3, r0
     338:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     33a:	680b      	ldr	r3, [r1, #0]
     33c:	079b      	lsls	r3, r3, #30
     33e:	d400      	bmi.n	342 <spi_init+0x1e>
     340:	e0a6      	b.n	490 <STACK_SIZE+0x90>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     342:	6a93      	ldr	r3, [r2, #40]	; 0x28
     344:	9303      	str	r3, [sp, #12]
     346:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     348:	9304      	str	r3, [sp, #16]
     34a:	6b13      	ldr	r3, [r2, #48]	; 0x30
     34c:	9305      	str	r3, [sp, #20]
     34e:	6b53      	ldr	r3, [r2, #52]	; 0x34
     350:	9306      	str	r3, [sp, #24]
     352:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     354:	231f      	movs	r3, #31
     356:	4699      	mov	r9, r3
     358:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     35a:	00bb      	lsls	r3, r7, #2
     35c:	aa03      	add	r2, sp, #12
     35e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     360:	2800      	cmp	r0, #0
     362:	d102      	bne.n	36a <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     364:	0030      	movs	r0, r6
     366:	4bac      	ldr	r3, [pc, #688]	; (618 <STACK_SIZE+0x218>)
     368:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     36a:	1c43      	adds	r3, r0, #1
     36c:	d027      	beq.n	3be <spi_init+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     36e:	0402      	lsls	r2, r0, #16
     370:	0c13      	lsrs	r3, r2, #16
     372:	469c      	mov	ip, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     374:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     376:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     378:	2500      	movs	r5, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     37a:	0603      	lsls	r3, r0, #24
     37c:	d403      	bmi.n	386 <spi_init+0x62>
		return &(ports[port_index]->Group[group_index]);
     37e:	094b      	lsrs	r3, r1, #5
     380:	01db      	lsls	r3, r3, #7
     382:	4aa6      	ldr	r2, [pc, #664]	; (61c <STACK_SIZE+0x21c>)
     384:	189d      	adds	r5, r3, r2
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     386:	464b      	mov	r3, r9
     388:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     38a:	18e8      	adds	r0, r5, r3
     38c:	3040      	adds	r0, #64	; 0x40
     38e:	7800      	ldrb	r0, [r0, #0]
     390:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     392:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     394:	4652      	mov	r2, sl
     396:	07d2      	lsls	r2, r2, #31
     398:	d50a      	bpl.n	3b0 <spi_init+0x8c>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     39a:	085b      	lsrs	r3, r3, #1
     39c:	18eb      	adds	r3, r5, r3
     39e:	3330      	adds	r3, #48	; 0x30
     3a0:	7818      	ldrb	r0, [r3, #0]
     3a2:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
     3a4:	07cb      	lsls	r3, r1, #31
     3a6:	d501      	bpl.n	3ac <spi_init+0x88>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     3a8:	0900      	lsrs	r0, r0, #4
     3aa:	e001      	b.n	3b0 <spi_init+0x8c>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     3ac:	230f      	movs	r3, #15
     3ae:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     3b0:	4584      	cmp	ip, r0
     3b2:	d004      	beq.n	3be <spi_init+0x9a>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     3b4:	2300      	movs	r3, #0
     3b6:	4642      	mov	r2, r8
     3b8:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     3ba:	201c      	movs	r0, #28
     3bc:	e126      	b.n	60c <STACK_SIZE+0x20c>
     3be:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     3c0:	2f04      	cmp	r7, #4
     3c2:	d1c9      	bne.n	358 <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     3c4:	200d      	movs	r0, #13
     3c6:	4b96      	ldr	r3, [pc, #600]	; (620 <STACK_SIZE+0x220>)
     3c8:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     3ca:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     3cc:	2700      	movs	r7, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     3ce:	2b01      	cmp	r3, #1
     3d0:	d112      	bne.n	3f8 <spi_init+0xd4>
		enum status_code error_code = _sercom_get_sync_baud_val(
     3d2:	aa02      	add	r2, sp, #8
     3d4:	0001      	movs	r1, r0
     3d6:	69a0      	ldr	r0, [r4, #24]
     3d8:	4b92      	ldr	r3, [pc, #584]	; (624 <STACK_SIZE+0x224>)
     3da:	4798      	blx	r3
     3dc:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     3de:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     3e0:	2b00      	cmp	r3, #0
     3e2:	d000      	beq.n	3e6 <spi_init+0xc2>
     3e4:	e112      	b.n	60c <STACK_SIZE+0x20c>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     3e6:	7b33      	ldrb	r3, [r6, #12]
     3e8:	b2db      	uxtb	r3, r3
     3ea:	aa02      	add	r2, sp, #8
     3ec:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     3ee:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     3f0:	429a      	cmp	r2, r3
     3f2:	d000      	beq.n	3f6 <spi_init+0xd2>
     3f4:	e10a      	b.n	60c <STACK_SIZE+0x20c>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     3f6:	370c      	adds	r7, #12
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     3f8:	7825      	ldrb	r5, [r4, #0]
     3fa:	2d00      	cmp	r5, #0
     3fc:	d114      	bne.n	428 <STACK_SIZE+0x28>
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     3fe:	6832      	ldr	r2, [r6, #0]
     400:	7fe3      	ldrb	r3, [r4, #31]
     402:	041b      	lsls	r3, r3, #16
     404:	7fa1      	ldrb	r1, [r4, #30]
     406:	430b      	orrs	r3, r1
			return STATUS_ERR_DENIED;
     408:	201c      	movs	r0, #28
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     40a:	4293      	cmp	r3, r2
     40c:	d000      	beq.n	410 <STACK_SIZE+0x10>
     40e:	e0fd      	b.n	60c <STACK_SIZE+0x20c>

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
     410:	69a1      	ldr	r1, [r4, #24]

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
     412:	8ba3      	ldrh	r3, [r4, #28]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
			return STATUS_ERR_DENIED;
		}

		if (config->mode_specific.slave.preload_enable) {
     414:	2220      	movs	r2, #32
     416:	5ca2      	ldrb	r2, [r4, r2]
     418:	2a00      	cmp	r2, #0
     41a:	d001      	beq.n	420 <STACK_SIZE+0x20>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     41c:	2240      	movs	r2, #64	; 0x40
     41e:	4313      	orrs	r3, r2
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     420:	2208      	movs	r2, #8
     422:	430a      	orrs	r2, r1
     424:	4317      	orrs	r7, r2
     426:	e000      	b.n	42a <STACK_SIZE+0x2a>
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
     428:	2300      	movs	r3, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     42a:	6862      	ldr	r2, [r4, #4]
     42c:	68a1      	ldr	r1, [r4, #8]
     42e:	430a      	orrs	r2, r1
     430:	68e1      	ldr	r1, [r4, #12]
     432:	430a      	orrs	r2, r1
     434:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
     436:	7c21      	ldrb	r1, [r4, #16]
     438:	430b      	orrs	r3, r1

	if (config->run_in_standby) {
     43a:	7c61      	ldrb	r1, [r4, #17]
     43c:	2900      	cmp	r1, #0
     43e:	d001      	beq.n	444 <STACK_SIZE+0x44>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     440:	2180      	movs	r1, #128	; 0x80
     442:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     444:	7ca1      	ldrb	r1, [r4, #18]
     446:	2900      	cmp	r1, #0
     448:	d002      	beq.n	450 <STACK_SIZE+0x50>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     44a:	2180      	movs	r1, #128	; 0x80
     44c:	0289      	lsls	r1, r1, #10
     44e:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     450:	7ce1      	ldrb	r1, [r4, #19]
     452:	2900      	cmp	r1, #0
     454:	d002      	beq.n	45c <STACK_SIZE+0x5c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     456:	2180      	movs	r1, #128	; 0x80
     458:	0089      	lsls	r1, r1, #2
     45a:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     45c:	7d21      	ldrb	r1, [r4, #20]
     45e:	2900      	cmp	r1, #0
     460:	d002      	beq.n	468 <STACK_SIZE+0x68>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     462:	2180      	movs	r1, #128	; 0x80
     464:	0189      	lsls	r1, r1, #6
     466:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     468:	6830      	ldr	r0, [r6, #0]
     46a:	2102      	movs	r1, #2
     46c:	430a      	orrs	r2, r1
     46e:	4282      	cmp	r2, r0
     470:	d109      	bne.n	486 <STACK_SIZE+0x86>
			spi_module->CTRLB.reg == ctrlb) {
     472:	6872      	ldr	r2, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     474:	429a      	cmp	r2, r3
     476:	d106      	bne.n	486 <STACK_SIZE+0x86>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     478:	4643      	mov	r3, r8
     47a:	715d      	strb	r5, [r3, #5]
		module->character_size = config->character_size;
     47c:	7c23      	ldrb	r3, [r4, #16]
     47e:	4642      	mov	r2, r8
     480:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     482:	2000      	movs	r0, #0
     484:	e0c2      	b.n	60c <STACK_SIZE+0x20c>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     486:	2300      	movs	r3, #0
     488:	4642      	mov	r2, r8
     48a:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
     48c:	201c      	movs	r0, #28
     48e:	e0bd      	b.n	60c <STACK_SIZE+0x20c>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     490:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     492:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     494:	07db      	lsls	r3, r3, #31
     496:	d500      	bpl.n	49a <STACK_SIZE+0x9a>
     498:	e0b8      	b.n	60c <STACK_SIZE+0x20c>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     49a:	0008      	movs	r0, r1
     49c:	4b62      	ldr	r3, [pc, #392]	; (628 <STACK_SIZE+0x228>)
     49e:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4a0:	4962      	ldr	r1, [pc, #392]	; (62c <STACK_SIZE+0x22c>)
     4a2:	6a0a      	ldr	r2, [r1, #32]
     4a4:	1c85      	adds	r5, r0, #2
     4a6:	2301      	movs	r3, #1
     4a8:	40ab      	lsls	r3, r5
     4aa:	4313      	orrs	r3, r2
     4ac:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     4ae:	a907      	add	r1, sp, #28
     4b0:	2724      	movs	r7, #36	; 0x24
     4b2:	5de3      	ldrb	r3, [r4, r7]
     4b4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     4b6:	300e      	adds	r0, #14
     4b8:	b2c5      	uxtb	r5, r0
     4ba:	0028      	movs	r0, r5
     4bc:	4b5c      	ldr	r3, [pc, #368]	; (630 <STACK_SIZE+0x230>)
     4be:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     4c0:	0028      	movs	r0, r5
     4c2:	4b5c      	ldr	r3, [pc, #368]	; (634 <STACK_SIZE+0x234>)
     4c4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     4c6:	5de0      	ldrb	r0, [r4, r7]
     4c8:	2100      	movs	r1, #0
     4ca:	4b5b      	ldr	r3, [pc, #364]	; (638 <STACK_SIZE+0x238>)
     4cc:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     4ce:	7823      	ldrb	r3, [r4, #0]
     4d0:	2b01      	cmp	r3, #1
     4d2:	d103      	bne.n	4dc <STACK_SIZE+0xdc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     4d4:	6832      	ldr	r2, [r6, #0]
     4d6:	330b      	adds	r3, #11
     4d8:	4313      	orrs	r3, r2
     4da:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     4dc:	7823      	ldrb	r3, [r4, #0]
     4de:	2b00      	cmp	r3, #0
     4e0:	d103      	bne.n	4ea <STACK_SIZE+0xea>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     4e2:	6832      	ldr	r2, [r6, #0]
     4e4:	3308      	adds	r3, #8
     4e6:	4313      	orrs	r3, r2
     4e8:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     4ea:	4643      	mov	r3, r8
     4ec:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4ee:	ab02      	add	r3, sp, #8
     4f0:	2280      	movs	r2, #128	; 0x80
     4f2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4f4:	2200      	movs	r2, #0
     4f6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     4f8:	2101      	movs	r1, #1
     4fa:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     4fc:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     4fe:	7823      	ldrb	r3, [r4, #0]
     500:	2b00      	cmp	r3, #0
     502:	d101      	bne.n	508 <STACK_SIZE+0x108>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     504:	ab02      	add	r3, sp, #8
     506:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     50a:	9303      	str	r3, [sp, #12]
     50c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     50e:	9304      	str	r3, [sp, #16]
     510:	6b23      	ldr	r3, [r4, #48]	; 0x30
     512:	9305      	str	r3, [sp, #20]
     514:	6b63      	ldr	r3, [r4, #52]	; 0x34
     516:	9306      	str	r3, [sp, #24]
     518:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     51a:	ad02      	add	r5, sp, #8
     51c:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     51e:	00bb      	lsls	r3, r7, #2
     520:	aa03      	add	r2, sp, #12
     522:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     524:	2800      	cmp	r0, #0
     526:	d102      	bne.n	52e <STACK_SIZE+0x12e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     528:	0030      	movs	r0, r6
     52a:	4b3b      	ldr	r3, [pc, #236]	; (618 <STACK_SIZE+0x218>)
     52c:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     52e:	1c43      	adds	r3, r0, #1
     530:	d005      	beq.n	53e <STACK_SIZE+0x13e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     532:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     534:	0c00      	lsrs	r0, r0, #16
     536:	b2c0      	uxtb	r0, r0
     538:	0029      	movs	r1, r5
     53a:	4b40      	ldr	r3, [pc, #256]	; (63c <STACK_SIZE+0x23c>)
     53c:	4798      	blx	r3
     53e:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     540:	2f04      	cmp	r7, #4
     542:	d1eb      	bne.n	51c <STACK_SIZE+0x11c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     544:	7823      	ldrb	r3, [r4, #0]
     546:	4642      	mov	r2, r8
     548:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     54a:	7c23      	ldrb	r3, [r4, #16]
     54c:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     54e:	7ca3      	ldrb	r3, [r4, #18]
     550:	71d3      	strb	r3, [r2, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     552:	7d23      	ldrb	r3, [r4, #20]
     554:	7213      	strb	r3, [r2, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     556:	2200      	movs	r2, #0
     558:	466b      	mov	r3, sp
     55a:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     55c:	7823      	ldrb	r3, [r4, #0]
     55e:	2b01      	cmp	r3, #1
     560:	d115      	bne.n	58e <STACK_SIZE+0x18e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     562:	4643      	mov	r3, r8
     564:	6818      	ldr	r0, [r3, #0]
     566:	4b30      	ldr	r3, [pc, #192]	; (628 <STACK_SIZE+0x228>)
     568:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     56a:	300e      	adds	r0, #14
     56c:	b2c0      	uxtb	r0, r0
     56e:	4b2c      	ldr	r3, [pc, #176]	; (620 <STACK_SIZE+0x220>)
     570:	4798      	blx	r3
     572:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     574:	466b      	mov	r3, sp
     576:	1d9a      	adds	r2, r3, #6
     578:	69a0      	ldr	r0, [r4, #24]
     57a:	4b2a      	ldr	r3, [pc, #168]	; (624 <STACK_SIZE+0x224>)
     57c:	4798      	blx	r3
     57e:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     580:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     582:	2b00      	cmp	r3, #0
     584:	d142      	bne.n	60c <STACK_SIZE+0x20c>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     586:	466b      	mov	r3, sp
     588:	3306      	adds	r3, #6
     58a:	781b      	ldrb	r3, [r3, #0]
     58c:	7333      	strb	r3, [r6, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     58e:	7823      	ldrb	r3, [r4, #0]
     590:	2b00      	cmp	r3, #0
     592:	d10f      	bne.n	5b4 <STACK_SIZE+0x1b4>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     594:	69a7      	ldr	r7, [r4, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     596:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     598:	6a70      	ldr	r0, [r6, #36]	; 0x24
     59a:	7fe1      	ldrb	r1, [r4, #31]
     59c:	0409      	lsls	r1, r1, #16
     59e:	7fa5      	ldrb	r5, [r4, #30]
     5a0:	4329      	orrs	r1, r5
     5a2:	4301      	orrs	r1, r0
     5a4:	6271      	str	r1, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     5a6:	2220      	movs	r2, #32
     5a8:	5ca2      	ldrb	r2, [r4, r2]
     5aa:	2a00      	cmp	r2, #0
     5ac:	d004      	beq.n	5b8 <STACK_SIZE+0x1b8>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     5ae:	2140      	movs	r1, #64	; 0x40
     5b0:	430b      	orrs	r3, r1
     5b2:	e001      	b.n	5b8 <STACK_SIZE+0x1b8>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     5b4:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     5b6:	2700      	movs	r7, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     5b8:	6862      	ldr	r2, [r4, #4]
     5ba:	68a1      	ldr	r1, [r4, #8]
     5bc:	430a      	orrs	r2, r1
     5be:	68e1      	ldr	r1, [r4, #12]
     5c0:	430a      	orrs	r2, r1
     5c2:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
     5c4:	7c21      	ldrb	r1, [r4, #16]
     5c6:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     5c8:	7c61      	ldrb	r1, [r4, #17]
     5ca:	2900      	cmp	r1, #0
     5cc:	d103      	bne.n	5d6 <STACK_SIZE+0x1d6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     5ce:	491c      	ldr	r1, [pc, #112]	; (640 <STACK_SIZE+0x240>)
     5d0:	7889      	ldrb	r1, [r1, #2]
     5d2:	0789      	lsls	r1, r1, #30
     5d4:	d501      	bpl.n	5da <STACK_SIZE+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     5d6:	2180      	movs	r1, #128	; 0x80
     5d8:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     5da:	7ca1      	ldrb	r1, [r4, #18]
     5dc:	2900      	cmp	r1, #0
     5de:	d002      	beq.n	5e6 <STACK_SIZE+0x1e6>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     5e0:	2180      	movs	r1, #128	; 0x80
     5e2:	0289      	lsls	r1, r1, #10
     5e4:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     5e6:	7ce1      	ldrb	r1, [r4, #19]
     5e8:	2900      	cmp	r1, #0
     5ea:	d002      	beq.n	5f2 <STACK_SIZE+0x1f2>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     5ec:	2180      	movs	r1, #128	; 0x80
     5ee:	0089      	lsls	r1, r1, #2
     5f0:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     5f2:	7d21      	ldrb	r1, [r4, #20]
     5f4:	2900      	cmp	r1, #0
     5f6:	d002      	beq.n	5fe <STACK_SIZE+0x1fe>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     5f8:	2180      	movs	r1, #128	; 0x80
     5fa:	0189      	lsls	r1, r1, #6
     5fc:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     5fe:	6831      	ldr	r1, [r6, #0]
     600:	430a      	orrs	r2, r1
     602:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     604:	6872      	ldr	r2, [r6, #4]
     606:	4313      	orrs	r3, r2
     608:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
     60a:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     60c:	b008      	add	sp, #32
     60e:	bc1c      	pop	{r2, r3, r4}
     610:	4690      	mov	r8, r2
     612:	4699      	mov	r9, r3
     614:	46a2      	mov	sl, r4
     616:	bdf0      	pop	{r4, r5, r6, r7, pc}
     618:	000001f9 	.word	0x000001f9
     61c:	41004400 	.word	0x41004400
     620:	00000d39 	.word	0x00000d39
     624:	00000185 	.word	0x00000185
     628:	000002bd 	.word	0x000002bd
     62c:	40000400 	.word	0x40000400
     630:	00000d1d 	.word	0x00000d1d
     634:	00000c91 	.word	0x00000c91
     638:	000001ad 	.word	0x000001ad
     63c:	00000e15 	.word	0x00000e15
     640:	41002000 	.word	0x41002000

00000644 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     644:	4b0c      	ldr	r3, [pc, #48]	; (678 <cpu_irq_enter_critical+0x34>)
     646:	681b      	ldr	r3, [r3, #0]
     648:	2b00      	cmp	r3, #0
     64a:	d110      	bne.n	66e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     64c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     650:	2b00      	cmp	r3, #0
     652:	d109      	bne.n	668 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     654:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     656:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     65a:	2200      	movs	r2, #0
     65c:	4b07      	ldr	r3, [pc, #28]	; (67c <cpu_irq_enter_critical+0x38>)
     65e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     660:	3201      	adds	r2, #1
     662:	4b07      	ldr	r3, [pc, #28]	; (680 <cpu_irq_enter_critical+0x3c>)
     664:	701a      	strb	r2, [r3, #0]
     666:	e002      	b.n	66e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     668:	2200      	movs	r2, #0
     66a:	4b05      	ldr	r3, [pc, #20]	; (680 <cpu_irq_enter_critical+0x3c>)
     66c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     66e:	4a02      	ldr	r2, [pc, #8]	; (678 <cpu_irq_enter_critical+0x34>)
     670:	6813      	ldr	r3, [r2, #0]
     672:	3301      	adds	r3, #1
     674:	6013      	str	r3, [r2, #0]
}
     676:	4770      	bx	lr
     678:	2000009c 	.word	0x2000009c
     67c:	20000008 	.word	0x20000008
     680:	200000a0 	.word	0x200000a0

00000684 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     684:	4b08      	ldr	r3, [pc, #32]	; (6a8 <cpu_irq_leave_critical+0x24>)
     686:	681a      	ldr	r2, [r3, #0]
     688:	3a01      	subs	r2, #1
     68a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	2b00      	cmp	r3, #0
     690:	d109      	bne.n	6a6 <cpu_irq_leave_critical+0x22>
     692:	4b06      	ldr	r3, [pc, #24]	; (6ac <cpu_irq_leave_critical+0x28>)
     694:	781b      	ldrb	r3, [r3, #0]
     696:	2b00      	cmp	r3, #0
     698:	d005      	beq.n	6a6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     69a:	2201      	movs	r2, #1
     69c:	4b04      	ldr	r3, [pc, #16]	; (6b0 <cpu_irq_leave_critical+0x2c>)
     69e:	701a      	strb	r2, [r3, #0]
     6a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     6a4:	b662      	cpsie	i
	}
}
     6a6:	4770      	bx	lr
     6a8:	2000009c 	.word	0x2000009c
     6ac:	200000a0 	.word	0x200000a0
     6b0:	20000008 	.word	0x20000008

000006b4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     6b8:	ac01      	add	r4, sp, #4
     6ba:	2501      	movs	r5, #1
     6bc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     6be:	2700      	movs	r7, #0
     6c0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     6c2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     6c4:	0021      	movs	r1, r4
     6c6:	2009      	movs	r0, #9
     6c8:	4e06      	ldr	r6, [pc, #24]	; (6e4 <system_board_init+0x30>)
     6ca:	47b0      	blx	r6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     6cc:	2280      	movs	r2, #128	; 0x80
     6ce:	0092      	lsls	r2, r2, #2
     6d0:	4b05      	ldr	r3, [pc, #20]	; (6e8 <system_board_init+0x34>)
     6d2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     6d4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     6d6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     6d8:	0021      	movs	r1, r4
     6da:	2019      	movs	r0, #25
     6dc:	47b0      	blx	r6
}
     6de:	b003      	add	sp, #12
     6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	000006ed 	.word	0x000006ed
     6e8:	41004400 	.word	0x41004400

000006ec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     6ec:	b500      	push	{lr}
     6ee:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6f0:	ab01      	add	r3, sp, #4
     6f2:	2280      	movs	r2, #128	; 0x80
     6f4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     6f6:	780a      	ldrb	r2, [r1, #0]
     6f8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     6fa:	784a      	ldrb	r2, [r1, #1]
     6fc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     6fe:	788a      	ldrb	r2, [r1, #2]
     700:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     702:	0019      	movs	r1, r3
     704:	4b01      	ldr	r3, [pc, #4]	; (70c <port_pin_set_config+0x20>)
     706:	4798      	blx	r3
}
     708:	b003      	add	sp, #12
     70a:	bd00      	pop	{pc}
     70c:	00000e15 	.word	0x00000e15

00000710 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     710:	b510      	push	{r4, lr}
	switch (clock_source) {
     712:	2808      	cmp	r0, #8
     714:	d803      	bhi.n	71e <system_clock_source_get_hz+0xe>
     716:	0080      	lsls	r0, r0, #2
     718:	4b1b      	ldr	r3, [pc, #108]	; (788 <system_clock_source_get_hz+0x78>)
     71a:	581b      	ldr	r3, [r3, r0]
     71c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     71e:	2000      	movs	r0, #0
     720:	e030      	b.n	784 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     722:	4b1a      	ldr	r3, [pc, #104]	; (78c <system_clock_source_get_hz+0x7c>)
     724:	6918      	ldr	r0, [r3, #16]
     726:	e02d      	b.n	784 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     728:	4b19      	ldr	r3, [pc, #100]	; (790 <system_clock_source_get_hz+0x80>)
     72a:	6a1b      	ldr	r3, [r3, #32]
     72c:	059b      	lsls	r3, r3, #22
     72e:	0f9b      	lsrs	r3, r3, #30
     730:	4818      	ldr	r0, [pc, #96]	; (794 <system_clock_source_get_hz+0x84>)
     732:	40d8      	lsrs	r0, r3
     734:	e026      	b.n	784 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     736:	4b15      	ldr	r3, [pc, #84]	; (78c <system_clock_source_get_hz+0x7c>)
     738:	6958      	ldr	r0, [r3, #20]
     73a:	e023      	b.n	784 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     73c:	4b13      	ldr	r3, [pc, #76]	; (78c <system_clock_source_get_hz+0x7c>)
     73e:	681b      	ldr	r3, [r3, #0]
     740:	2002      	movs	r0, #2
     742:	4018      	ands	r0, r3
     744:	d01e      	beq.n	784 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     746:	4912      	ldr	r1, [pc, #72]	; (790 <system_clock_source_get_hz+0x80>)
     748:	2210      	movs	r2, #16
     74a:	68cb      	ldr	r3, [r1, #12]
     74c:	421a      	tst	r2, r3
     74e:	d0fc      	beq.n	74a <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     750:	4b0e      	ldr	r3, [pc, #56]	; (78c <system_clock_source_get_hz+0x7c>)
     752:	681b      	ldr	r3, [r3, #0]
     754:	075b      	lsls	r3, r3, #29
     756:	d514      	bpl.n	782 <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     758:	2000      	movs	r0, #0
     75a:	4b0f      	ldr	r3, [pc, #60]	; (798 <system_clock_source_get_hz+0x88>)
     75c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     75e:	4b0b      	ldr	r3, [pc, #44]	; (78c <system_clock_source_get_hz+0x7c>)
     760:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     762:	041b      	lsls	r3, r3, #16
     764:	0c1b      	lsrs	r3, r3, #16
     766:	4358      	muls	r0, r3
     768:	e00c      	b.n	784 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     76a:	2350      	movs	r3, #80	; 0x50
     76c:	4a08      	ldr	r2, [pc, #32]	; (790 <system_clock_source_get_hz+0x80>)
     76e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     770:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     772:	075b      	lsls	r3, r3, #29
     774:	d506      	bpl.n	784 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     776:	4b05      	ldr	r3, [pc, #20]	; (78c <system_clock_source_get_hz+0x7c>)
     778:	68d8      	ldr	r0, [r3, #12]
     77a:	e003      	b.n	784 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     77c:	2080      	movs	r0, #128	; 0x80
     77e:	0200      	lsls	r0, r0, #8
     780:	e000      	b.n	784 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     782:	4806      	ldr	r0, [pc, #24]	; (79c <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     784:	bd10      	pop	{r4, pc}
     786:	46c0      	nop			; (mov r8, r8)
     788:	00001850 	.word	0x00001850
     78c:	200000a4 	.word	0x200000a4
     790:	40000800 	.word	0x40000800
     794:	007a1200 	.word	0x007a1200
     798:	00000d39 	.word	0x00000d39
     79c:	02dc6c00 	.word	0x02dc6c00

000007a0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     7a0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     7a2:	4c0c      	ldr	r4, [pc, #48]	; (7d4 <system_clock_source_osc8m_set_config+0x34>)
     7a4:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     7a6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     7a8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     7aa:	7842      	ldrb	r2, [r0, #1]
     7ac:	2001      	movs	r0, #1
     7ae:	4002      	ands	r2, r0
     7b0:	0192      	lsls	r2, r2, #6
     7b2:	2640      	movs	r6, #64	; 0x40
     7b4:	43b3      	bics	r3, r6
     7b6:	4313      	orrs	r3, r2
     7b8:	0002      	movs	r2, r0
     7ba:	402a      	ands	r2, r5
     7bc:	01d2      	lsls	r2, r2, #7
     7be:	307f      	adds	r0, #127	; 0x7f
     7c0:	4383      	bics	r3, r0
     7c2:	4313      	orrs	r3, r2
     7c4:	2203      	movs	r2, #3
     7c6:	400a      	ands	r2, r1
     7c8:	0212      	lsls	r2, r2, #8
     7ca:	4903      	ldr	r1, [pc, #12]	; (7d8 <system_clock_source_osc8m_set_config+0x38>)
     7cc:	400b      	ands	r3, r1
     7ce:	4313      	orrs	r3, r2
     7d0:	6223      	str	r3, [r4, #32]
}
     7d2:	bd70      	pop	{r4, r5, r6, pc}
     7d4:	40000800 	.word	0x40000800
     7d8:	fffffcff 	.word	0xfffffcff

000007dc <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7de:	4657      	mov	r7, sl
     7e0:	464e      	mov	r6, r9
     7e2:	4645      	mov	r5, r8
     7e4:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     7e6:	4e1c      	ldr	r6, [pc, #112]	; (858 <system_clock_source_osc32k_set_config+0x7c>)
     7e8:	69b3      	ldr	r3, [r6, #24]
     7ea:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     7ec:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     7ee:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     7f0:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     7f2:	78c3      	ldrb	r3, [r0, #3]
     7f4:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
     7f6:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
     7f8:	7883      	ldrb	r3, [r0, #2]
     7fa:	2001      	movs	r0, #1
     7fc:	4003      	ands	r3, r0
     7fe:	009b      	lsls	r3, r3, #2
     800:	469a      	mov	sl, r3
     802:	2204      	movs	r2, #4
     804:	4690      	mov	r8, r2
     806:	4662      	mov	r2, ip
     808:	4643      	mov	r3, r8
     80a:	439a      	bics	r2, r3
     80c:	0013      	movs	r3, r2
     80e:	4652      	mov	r2, sl
     810:	431a      	orrs	r2, r3
     812:	0013      	movs	r3, r2
     814:	4001      	ands	r1, r0
     816:	00c9      	lsls	r1, r1, #3
     818:	2208      	movs	r2, #8
     81a:	4393      	bics	r3, r2
     81c:	430b      	orrs	r3, r1
     81e:	464a      	mov	r2, r9
     820:	4002      	ands	r2, r0
     822:	0192      	lsls	r2, r2, #6
     824:	2140      	movs	r1, #64	; 0x40
     826:	438b      	bics	r3, r1
     828:	4313      	orrs	r3, r2
     82a:	4007      	ands	r7, r0
     82c:	01ff      	lsls	r7, r7, #7
     82e:	2280      	movs	r2, #128	; 0x80
     830:	4393      	bics	r3, r2
     832:	433b      	orrs	r3, r7
     834:	3a79      	subs	r2, #121	; 0x79
     836:	4015      	ands	r5, r2
     838:	022d      	lsls	r5, r5, #8
     83a:	4f08      	ldr	r7, [pc, #32]	; (85c <system_clock_source_osc32k_set_config+0x80>)
     83c:	403b      	ands	r3, r7
     83e:	432b      	orrs	r3, r5
     840:	4004      	ands	r4, r0
     842:	0320      	lsls	r0, r4, #12
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <system_clock_source_osc32k_set_config+0x84>)
     846:	401c      	ands	r4, r3
     848:	4304      	orrs	r4, r0
     84a:	61b4      	str	r4, [r6, #24]
}
     84c:	bc1c      	pop	{r2, r3, r4}
     84e:	4690      	mov	r8, r2
     850:	4699      	mov	r9, r3
     852:	46a2      	mov	sl, r4
     854:	bdf0      	pop	{r4, r5, r6, r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	40000800 	.word	0x40000800
     85c:	fffff8ff 	.word	0xfffff8ff
     860:	ffffefff 	.word	0xffffefff

00000864 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     864:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     866:	7a03      	ldrb	r3, [r0, #8]
     868:	069b      	lsls	r3, r3, #26
     86a:	0c1a      	lsrs	r2, r3, #16
     86c:	8943      	ldrh	r3, [r0, #10]
     86e:	059b      	lsls	r3, r3, #22
     870:	0d9b      	lsrs	r3, r3, #22
     872:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
     874:	4c19      	ldr	r4, [pc, #100]	; (8dc <system_clock_source_dfll_set_config+0x78>)
     876:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
     878:	7981      	ldrb	r1, [r0, #6]
     87a:	79c3      	ldrb	r3, [r0, #7]
     87c:	4319      	orrs	r1, r3
     87e:	8843      	ldrh	r3, [r0, #2]
     880:	8882      	ldrh	r2, [r0, #4]
     882:	4313      	orrs	r3, r2
     884:	430b      	orrs	r3, r1
     886:	7842      	ldrb	r2, [r0, #1]
     888:	01d2      	lsls	r2, r2, #7
     88a:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
     88c:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     88e:	7803      	ldrb	r3, [r0, #0]
     890:	2b04      	cmp	r3, #4
     892:	d10f      	bne.n	8b4 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     894:	7b03      	ldrb	r3, [r0, #12]
     896:	069b      	lsls	r3, r3, #26
     898:	8a02      	ldrh	r2, [r0, #16]
     89a:	4313      	orrs	r3, r2
     89c:	0019      	movs	r1, r3
     89e:	89c3      	ldrh	r3, [r0, #14]
     8a0:	041b      	lsls	r3, r3, #16
     8a2:	4a0f      	ldr	r2, [pc, #60]	; (8e0 <system_clock_source_dfll_set_config+0x7c>)
     8a4:	4013      	ands	r3, r2
     8a6:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
     8a8:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
     8aa:	6821      	ldr	r1, [r4, #0]
     8ac:	2304      	movs	r3, #4
     8ae:	430b      	orrs	r3, r1
     8b0:	6023      	str	r3, [r4, #0]
     8b2:	e011      	b.n	8d8 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     8b4:	2b20      	cmp	r3, #32
     8b6:	d10f      	bne.n	8d8 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     8b8:	7b03      	ldrb	r3, [r0, #12]
     8ba:	069b      	lsls	r3, r3, #26
     8bc:	8a02      	ldrh	r2, [r0, #16]
     8be:	4313      	orrs	r3, r2
     8c0:	0019      	movs	r1, r3
     8c2:	89c3      	ldrh	r3, [r0, #14]
     8c4:	041b      	lsls	r3, r3, #16
     8c6:	4a06      	ldr	r2, [pc, #24]	; (8e0 <system_clock_source_dfll_set_config+0x7c>)
     8c8:	4013      	ands	r3, r2
     8ca:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
     8cc:	4a03      	ldr	r2, [pc, #12]	; (8dc <system_clock_source_dfll_set_config+0x78>)
     8ce:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     8d0:	6813      	ldr	r3, [r2, #0]
     8d2:	4904      	ldr	r1, [pc, #16]	; (8e4 <system_clock_source_dfll_set_config+0x80>)
     8d4:	430b      	orrs	r3, r1
     8d6:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     8d8:	bd10      	pop	{r4, pc}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	200000a4 	.word	0x200000a4
     8e0:	03ff0000 	.word	0x03ff0000
     8e4:	00000424 	.word	0x00000424

000008e8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     8e8:	2808      	cmp	r0, #8
     8ea:	d803      	bhi.n	8f4 <system_clock_source_enable+0xc>
     8ec:	0080      	lsls	r0, r0, #2
     8ee:	4b25      	ldr	r3, [pc, #148]	; (984 <system_clock_source_enable+0x9c>)
     8f0:	581b      	ldr	r3, [r3, r0]
     8f2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     8f4:	2017      	movs	r0, #23
     8f6:	e044      	b.n	982 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     8f8:	4a23      	ldr	r2, [pc, #140]	; (988 <system_clock_source_enable+0xa0>)
     8fa:	6a11      	ldr	r1, [r2, #32]
     8fc:	2302      	movs	r3, #2
     8fe:	430b      	orrs	r3, r1
     900:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     902:	2000      	movs	r0, #0
     904:	e03d      	b.n	982 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     906:	4a20      	ldr	r2, [pc, #128]	; (988 <system_clock_source_enable+0xa0>)
     908:	6991      	ldr	r1, [r2, #24]
     90a:	2302      	movs	r3, #2
     90c:	430b      	orrs	r3, r1
     90e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     910:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     912:	e036      	b.n	982 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     914:	4a1c      	ldr	r2, [pc, #112]	; (988 <system_clock_source_enable+0xa0>)
     916:	8a11      	ldrh	r1, [r2, #16]
     918:	2302      	movs	r3, #2
     91a:	430b      	orrs	r3, r1
     91c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     91e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     920:	e02f      	b.n	982 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     922:	4a19      	ldr	r2, [pc, #100]	; (988 <system_clock_source_enable+0xa0>)
     924:	8a91      	ldrh	r1, [r2, #20]
     926:	2302      	movs	r3, #2
     928:	430b      	orrs	r3, r1
     92a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     92c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     92e:	e028      	b.n	982 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     930:	4916      	ldr	r1, [pc, #88]	; (98c <system_clock_source_enable+0xa4>)
     932:	680b      	ldr	r3, [r1, #0]
     934:	2202      	movs	r2, #2
     936:	4313      	orrs	r3, r2
     938:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     93a:	4b13      	ldr	r3, [pc, #76]	; (988 <system_clock_source_enable+0xa0>)
     93c:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     93e:	0019      	movs	r1, r3
     940:	320e      	adds	r2, #14
     942:	68cb      	ldr	r3, [r1, #12]
     944:	421a      	tst	r2, r3
     946:	d0fc      	beq.n	942 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     948:	4a10      	ldr	r2, [pc, #64]	; (98c <system_clock_source_enable+0xa4>)
     94a:	6891      	ldr	r1, [r2, #8]
     94c:	4b0e      	ldr	r3, [pc, #56]	; (988 <system_clock_source_enable+0xa0>)
     94e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     950:	6852      	ldr	r2, [r2, #4]
     952:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
     954:	2200      	movs	r2, #0
     956:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     958:	0019      	movs	r1, r3
     95a:	3210      	adds	r2, #16
     95c:	68cb      	ldr	r3, [r1, #12]
     95e:	421a      	tst	r2, r3
     960:	d0fc      	beq.n	95c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     962:	4b0a      	ldr	r3, [pc, #40]	; (98c <system_clock_source_enable+0xa4>)
     964:	681b      	ldr	r3, [r3, #0]
     966:	b29b      	uxth	r3, r3
     968:	4a07      	ldr	r2, [pc, #28]	; (988 <system_clock_source_enable+0xa0>)
     96a:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     96c:	2000      	movs	r0, #0
     96e:	e008      	b.n	982 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     970:	4905      	ldr	r1, [pc, #20]	; (988 <system_clock_source_enable+0xa0>)
     972:	2244      	movs	r2, #68	; 0x44
     974:	5c88      	ldrb	r0, [r1, r2]
     976:	2302      	movs	r3, #2
     978:	4303      	orrs	r3, r0
     97a:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     97c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     97e:	e000      	b.n	982 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     980:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     982:	4770      	bx	lr
     984:	00001874 	.word	0x00001874
     988:	40000800 	.word	0x40000800
     98c:	200000a4 	.word	0x200000a4

00000990 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     990:	b5f0      	push	{r4, r5, r6, r7, lr}
     992:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     994:	22c2      	movs	r2, #194	; 0xc2
     996:	00d2      	lsls	r2, r2, #3
     998:	4b44      	ldr	r3, [pc, #272]	; (aac <system_clock_init+0x11c>)
     99a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     99c:	4944      	ldr	r1, [pc, #272]	; (ab0 <system_clock_init+0x120>)
     99e:	684b      	ldr	r3, [r1, #4]
     9a0:	221e      	movs	r2, #30
     9a2:	4393      	bics	r3, r2
     9a4:	3a1c      	subs	r2, #28
     9a6:	4313      	orrs	r3, r2
     9a8:	604b      	str	r3, [r1, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     9aa:	ab01      	add	r3, sp, #4
     9ac:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     9ae:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     9b0:	4d40      	ldr	r5, [pc, #256]	; (ab4 <system_clock_init+0x124>)
     9b2:	b2e0      	uxtb	r0, r4
     9b4:	a901      	add	r1, sp, #4
     9b6:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     9b8:	3401      	adds	r4, #1
     9ba:	2c18      	cmp	r4, #24
     9bc:	d1f9      	bne.n	9b2 <system_clock_init+0x22>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
     9be:	4d3e      	ldr	r5, [pc, #248]	; (ab8 <system_clock_init+0x128>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
     9c0:	682b      	ldr	r3, [r5, #0]
     9c2:	04da      	lsls	r2, r3, #19
     9c4:	4939      	ldr	r1, [pc, #228]	; (aac <system_clock_init+0x11c>)
     9c6:	6988      	ldr	r0, [r1, #24]
     9c8:	0e52      	lsrs	r2, r2, #25
     9ca:	0412      	lsls	r2, r2, #16
     9cc:	4b3b      	ldr	r3, [pc, #236]	; (abc <system_clock_init+0x12c>)
     9ce:	4003      	ands	r3, r0
     9d0:	4313      	orrs	r3, r2
     9d2:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
     9d4:	a80a      	add	r0, sp, #40	; 0x28
     9d6:	2301      	movs	r3, #1
     9d8:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     9da:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
     9dc:	2400      	movs	r4, #0
     9de:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
     9e0:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     9e2:	3306      	adds	r3, #6
     9e4:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
     9e6:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     9e8:	4b35      	ldr	r3, [pc, #212]	; (ac0 <system_clock_init+0x130>)
     9ea:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     9ec:	2004      	movs	r0, #4
     9ee:	4b35      	ldr	r3, [pc, #212]	; (ac4 <system_clock_init+0x134>)
     9f0:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     9f2:	ab05      	add	r3, sp, #20
     9f4:	2200      	movs	r2, #0
     9f6:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     9f8:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     9fa:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     9fc:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
     9fe:	213f      	movs	r1, #63	; 0x3f
     a00:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     a02:	393b      	subs	r1, #59	; 0x3b
     a04:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     a06:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     a08:	682b      	ldr	r3, [r5, #0]
     a0a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     a0c:	2b3f      	cmp	r3, #63	; 0x3f
     a0e:	d100      	bne.n	a12 <system_clock_init+0x82>
		coarse = 0x1f;
     a10:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
     a12:	a805      	add	r0, sp, #20
     a14:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     a16:	23b7      	movs	r3, #183	; 0xb7
     a18:	00db      	lsls	r3, r3, #3
     a1a:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     a1c:	2307      	movs	r3, #7
     a1e:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     a20:	3338      	adds	r3, #56	; 0x38
     a22:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     a24:	4b28      	ldr	r3, [pc, #160]	; (ac8 <system_clock_init+0x138>)
     a26:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     a28:	a804      	add	r0, sp, #16
     a2a:	2500      	movs	r5, #0
     a2c:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     a2e:	2601      	movs	r6, #1
     a30:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     a32:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     a34:	4b25      	ldr	r3, [pc, #148]	; (acc <system_clock_init+0x13c>)
     a36:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     a38:	2006      	movs	r0, #6
     a3a:	4f22      	ldr	r7, [pc, #136]	; (ac4 <system_clock_init+0x134>)
     a3c:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     a3e:	4b24      	ldr	r3, [pc, #144]	; (ad0 <system_clock_init+0x140>)
     a40:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     a42:	ac01      	add	r4, sp, #4
     a44:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
     a46:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     a48:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     a4a:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     a4c:	2304      	movs	r3, #4
     a4e:	7023      	strb	r3, [r4, #0]
     a50:	0021      	movs	r1, r4
     a52:	2001      	movs	r0, #1
     a54:	4b1f      	ldr	r3, [pc, #124]	; (ad4 <system_clock_init+0x144>)
     a56:	4798      	blx	r3
     a58:	2001      	movs	r0, #1
     a5a:	4b1f      	ldr	r3, [pc, #124]	; (ad8 <system_clock_init+0x148>)
     a5c:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     a5e:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     a60:	0021      	movs	r1, r4
     a62:	2000      	movs	r0, #0
     a64:	4b13      	ldr	r3, [pc, #76]	; (ab4 <system_clock_init+0x124>)
     a66:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     a68:	2000      	movs	r0, #0
     a6a:	4b1c      	ldr	r3, [pc, #112]	; (adc <system_clock_init+0x14c>)
     a6c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     a6e:	2007      	movs	r0, #7
     a70:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     a72:	490e      	ldr	r1, [pc, #56]	; (aac <system_clock_init+0x11c>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     a74:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     a76:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     a78:	4013      	ands	r3, r2
     a7a:	2bd0      	cmp	r3, #208	; 0xd0
     a7c:	d1fb      	bne.n	a76 <system_clock_init+0xe6>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     a7e:	4a18      	ldr	r2, [pc, #96]	; (ae0 <system_clock_init+0x150>)
     a80:	2300      	movs	r3, #0
     a82:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     a84:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     a86:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
     a88:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     a8a:	a901      	add	r1, sp, #4
     a8c:	2201      	movs	r2, #1
     a8e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     a90:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     a92:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     a94:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     a96:	3307      	adds	r3, #7
     a98:	700b      	strb	r3, [r1, #0]
     a9a:	2000      	movs	r0, #0
     a9c:	4b0d      	ldr	r3, [pc, #52]	; (ad4 <system_clock_init+0x144>)
     a9e:	4798      	blx	r3
     aa0:	2000      	movs	r0, #0
     aa2:	4b0d      	ldr	r3, [pc, #52]	; (ad8 <system_clock_init+0x148>)
     aa4:	4798      	blx	r3
#endif
}
     aa6:	b00d      	add	sp, #52	; 0x34
     aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	40000800 	.word	0x40000800
     ab0:	41004000 	.word	0x41004000
     ab4:	00000d1d 	.word	0x00000d1d
     ab8:	00806024 	.word	0x00806024
     abc:	ff80ffff 	.word	0xff80ffff
     ac0:	000007dd 	.word	0x000007dd
     ac4:	000008e9 	.word	0x000008e9
     ac8:	00000865 	.word	0x00000865
     acc:	000007a1 	.word	0x000007a1
     ad0:	00000ae5 	.word	0x00000ae5
     ad4:	00000b09 	.word	0x00000b09
     ad8:	00000bc1 	.word	0x00000bc1
     adc:	00000c91 	.word	0x00000c91
     ae0:	40000400 	.word	0x40000400

00000ae4 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     ae4:	4a06      	ldr	r2, [pc, #24]	; (b00 <system_gclk_init+0x1c>)
     ae6:	6991      	ldr	r1, [r2, #24]
     ae8:	2308      	movs	r3, #8
     aea:	430b      	orrs	r3, r1
     aec:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     aee:	2201      	movs	r2, #1
     af0:	4b04      	ldr	r3, [pc, #16]	; (b04 <system_gclk_init+0x20>)
     af2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     af4:	0019      	movs	r1, r3
     af6:	780b      	ldrb	r3, [r1, #0]
     af8:	4213      	tst	r3, r2
     afa:	d1fc      	bne.n	af6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     afc:	4770      	bx	lr
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	40000400 	.word	0x40000400
     b04:	40000c00 	.word	0x40000c00

00000b08 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     b08:	b570      	push	{r4, r5, r6, lr}
     b0a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     b0c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     b0e:	780c      	ldrb	r4, [r1, #0]
     b10:	0224      	lsls	r4, r4, #8
     b12:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     b14:	784b      	ldrb	r3, [r1, #1]
     b16:	2b00      	cmp	r3, #0
     b18:	d002      	beq.n	b20 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     b1a:	2380      	movs	r3, #128	; 0x80
     b1c:	02db      	lsls	r3, r3, #11
     b1e:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     b20:	7a4b      	ldrb	r3, [r1, #9]
     b22:	2b00      	cmp	r3, #0
     b24:	d002      	beq.n	b2c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     b26:	2380      	movs	r3, #128	; 0x80
     b28:	031b      	lsls	r3, r3, #12
     b2a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     b2c:	6848      	ldr	r0, [r1, #4]
     b2e:	2801      	cmp	r0, #1
     b30:	d918      	bls.n	b64 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     b32:	1e43      	subs	r3, r0, #1
     b34:	4218      	tst	r0, r3
     b36:	d110      	bne.n	b5a <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     b38:	2802      	cmp	r0, #2
     b3a:	d906      	bls.n	b4a <system_gclk_gen_set_config+0x42>
     b3c:	2302      	movs	r3, #2
     b3e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     b40:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     b42:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     b44:	4298      	cmp	r0, r3
     b46:	d8fb      	bhi.n	b40 <system_gclk_gen_set_config+0x38>
     b48:	e000      	b.n	b4c <system_gclk_gen_set_config+0x44>
     b4a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     b4c:	0212      	lsls	r2, r2, #8
     b4e:	4332      	orrs	r2, r6
     b50:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     b52:	2380      	movs	r3, #128	; 0x80
     b54:	035b      	lsls	r3, r3, #13
     b56:	431c      	orrs	r4, r3
     b58:	e004      	b.n	b64 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     b5a:	0205      	lsls	r5, r0, #8
     b5c:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     b5e:	2380      	movs	r3, #128	; 0x80
     b60:	029b      	lsls	r3, r3, #10
     b62:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     b64:	7a0b      	ldrb	r3, [r1, #8]
     b66:	2b00      	cmp	r3, #0
     b68:	d002      	beq.n	b70 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     b6a:	2380      	movs	r3, #128	; 0x80
     b6c:	039b      	lsls	r3, r3, #14
     b6e:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b70:	4a0f      	ldr	r2, [pc, #60]	; (bb0 <system_gclk_gen_set_config+0xa8>)
     b72:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
     b74:	b25b      	sxtb	r3, r3
     b76:	2b00      	cmp	r3, #0
     b78:	dbfb      	blt.n	b72 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     b7a:	4b0e      	ldr	r3, [pc, #56]	; (bb4 <system_gclk_gen_set_config+0xac>)
     b7c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     b7e:	4b0e      	ldr	r3, [pc, #56]	; (bb8 <system_gclk_gen_set_config+0xb0>)
     b80:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b82:	4a0b      	ldr	r2, [pc, #44]	; (bb0 <system_gclk_gen_set_config+0xa8>)
     b84:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     b86:	b25b      	sxtb	r3, r3
     b88:	2b00      	cmp	r3, #0
     b8a:	dbfb      	blt.n	b84 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     b8c:	4b08      	ldr	r3, [pc, #32]	; (bb0 <system_gclk_gen_set_config+0xa8>)
     b8e:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b90:	001a      	movs	r2, r3
     b92:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
     b94:	b25b      	sxtb	r3, r3
     b96:	2b00      	cmp	r3, #0
     b98:	dbfb      	blt.n	b92 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     b9a:	4a05      	ldr	r2, [pc, #20]	; (bb0 <system_gclk_gen_set_config+0xa8>)
     b9c:	6851      	ldr	r1, [r2, #4]
     b9e:	2380      	movs	r3, #128	; 0x80
     ba0:	025b      	lsls	r3, r3, #9
     ba2:	400b      	ands	r3, r1
     ba4:	431c      	orrs	r4, r3
     ba6:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ba8:	4b04      	ldr	r3, [pc, #16]	; (bbc <system_gclk_gen_set_config+0xb4>)
     baa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     bac:	bd70      	pop	{r4, r5, r6, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	40000c00 	.word	0x40000c00
     bb4:	00000645 	.word	0x00000645
     bb8:	40000c08 	.word	0x40000c08
     bbc:	00000685 	.word	0x00000685

00000bc0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     bc0:	b510      	push	{r4, lr}
     bc2:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     bc4:	4a0b      	ldr	r2, [pc, #44]	; (bf4 <system_gclk_gen_enable+0x34>)
     bc6:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     bc8:	b25b      	sxtb	r3, r3
     bca:	2b00      	cmp	r3, #0
     bcc:	dbfb      	blt.n	bc6 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     bce:	4b0a      	ldr	r3, [pc, #40]	; (bf8 <system_gclk_gen_enable+0x38>)
     bd0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     bd2:	4b0a      	ldr	r3, [pc, #40]	; (bfc <system_gclk_gen_enable+0x3c>)
     bd4:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     bd6:	4a07      	ldr	r2, [pc, #28]	; (bf4 <system_gclk_gen_enable+0x34>)
     bd8:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     bda:	b25b      	sxtb	r3, r3
     bdc:	2b00      	cmp	r3, #0
     bde:	dbfb      	blt.n	bd8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     be0:	4a04      	ldr	r2, [pc, #16]	; (bf4 <system_gclk_gen_enable+0x34>)
     be2:	6853      	ldr	r3, [r2, #4]
     be4:	2180      	movs	r1, #128	; 0x80
     be6:	0249      	lsls	r1, r1, #9
     be8:	430b      	orrs	r3, r1
     bea:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     bec:	4b04      	ldr	r3, [pc, #16]	; (c00 <system_gclk_gen_enable+0x40>)
     bee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     bf0:	bd10      	pop	{r4, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	40000c00 	.word	0x40000c00
     bf8:	00000645 	.word	0x00000645
     bfc:	40000c04 	.word	0x40000c04
     c00:	00000685 	.word	0x00000685

00000c04 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     c04:	b570      	push	{r4, r5, r6, lr}
     c06:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c08:	4a1a      	ldr	r2, [pc, #104]	; (c74 <system_gclk_gen_get_hz+0x70>)
     c0a:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     c0c:	b25b      	sxtb	r3, r3
     c0e:	2b00      	cmp	r3, #0
     c10:	dbfb      	blt.n	c0a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     c12:	4b19      	ldr	r3, [pc, #100]	; (c78 <system_gclk_gen_get_hz+0x74>)
     c14:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     c16:	4b19      	ldr	r3, [pc, #100]	; (c7c <system_gclk_gen_get_hz+0x78>)
     c18:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c1a:	4a16      	ldr	r2, [pc, #88]	; (c74 <system_gclk_gen_get_hz+0x70>)
     c1c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     c1e:	b25b      	sxtb	r3, r3
     c20:	2b00      	cmp	r3, #0
     c22:	dbfb      	blt.n	c1c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     c24:	4e13      	ldr	r6, [pc, #76]	; (c74 <system_gclk_gen_get_hz+0x70>)
     c26:	6870      	ldr	r0, [r6, #4]
     c28:	04c0      	lsls	r0, r0, #19
     c2a:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     c2c:	4b14      	ldr	r3, [pc, #80]	; (c80 <system_gclk_gen_get_hz+0x7c>)
     c2e:	4798      	blx	r3
     c30:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     c32:	4b12      	ldr	r3, [pc, #72]	; (c7c <system_gclk_gen_get_hz+0x78>)
     c34:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     c36:	6876      	ldr	r6, [r6, #4]
     c38:	02f6      	lsls	r6, r6, #11
     c3a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     c3c:	4b11      	ldr	r3, [pc, #68]	; (c84 <system_gclk_gen_get_hz+0x80>)
     c3e:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c40:	4a0c      	ldr	r2, [pc, #48]	; (c74 <system_gclk_gen_get_hz+0x70>)
     c42:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
     c44:	b25b      	sxtb	r3, r3
     c46:	2b00      	cmp	r3, #0
     c48:	dbfb      	blt.n	c42 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     c4a:	4b0a      	ldr	r3, [pc, #40]	; (c74 <system_gclk_gen_get_hz+0x70>)
     c4c:	689c      	ldr	r4, [r3, #8]
     c4e:	0224      	lsls	r4, r4, #8
     c50:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     c52:	4b0d      	ldr	r3, [pc, #52]	; (c88 <system_gclk_gen_get_hz+0x84>)
     c54:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     c56:	2e00      	cmp	r6, #0
     c58:	d107      	bne.n	c6a <system_gclk_gen_get_hz+0x66>
     c5a:	2c01      	cmp	r4, #1
     c5c:	d907      	bls.n	c6e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     c5e:	0021      	movs	r1, r4
     c60:	0028      	movs	r0, r5
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <system_gclk_gen_get_hz+0x88>)
     c64:	4798      	blx	r3
     c66:	0005      	movs	r5, r0
     c68:	e001      	b.n	c6e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     c6a:	3401      	adds	r4, #1
     c6c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     c6e:	0028      	movs	r0, r5
     c70:	bd70      	pop	{r4, r5, r6, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	40000c00 	.word	0x40000c00
     c78:	00000645 	.word	0x00000645
     c7c:	40000c04 	.word	0x40000c04
     c80:	00000711 	.word	0x00000711
     c84:	40000c08 	.word	0x40000c08
     c88:	00000685 	.word	0x00000685
     c8c:	00001349 	.word	0x00001349

00000c90 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     c90:	b510      	push	{r4, lr}
     c92:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     c94:	4b06      	ldr	r3, [pc, #24]	; (cb0 <system_gclk_chan_enable+0x20>)
     c96:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     c98:	4b06      	ldr	r3, [pc, #24]	; (cb4 <system_gclk_chan_enable+0x24>)
     c9a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     c9c:	4a06      	ldr	r2, [pc, #24]	; (cb8 <system_gclk_chan_enable+0x28>)
     c9e:	8851      	ldrh	r1, [r2, #2]
     ca0:	2380      	movs	r3, #128	; 0x80
     ca2:	01db      	lsls	r3, r3, #7
     ca4:	430b      	orrs	r3, r1
     ca6:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ca8:	4b04      	ldr	r3, [pc, #16]	; (cbc <system_gclk_chan_enable+0x2c>)
     caa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     cac:	bd10      	pop	{r4, pc}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	00000645 	.word	0x00000645
     cb4:	40000c02 	.word	0x40000c02
     cb8:	40000c00 	.word	0x40000c00
     cbc:	00000685 	.word	0x00000685

00000cc0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     cc0:	b510      	push	{r4, lr}
     cc2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     cc4:	4b0f      	ldr	r3, [pc, #60]	; (d04 <system_gclk_chan_disable+0x44>)
     cc6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     cc8:	4b0f      	ldr	r3, [pc, #60]	; (d08 <system_gclk_chan_disable+0x48>)
     cca:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     ccc:	4b0f      	ldr	r3, [pc, #60]	; (d0c <system_gclk_chan_disable+0x4c>)
     cce:	885a      	ldrh	r2, [r3, #2]
     cd0:	0512      	lsls	r2, r2, #20
     cd2:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     cd4:	8859      	ldrh	r1, [r3, #2]
     cd6:	4a0e      	ldr	r2, [pc, #56]	; (d10 <system_gclk_chan_disable+0x50>)
     cd8:	400a      	ands	r2, r1
     cda:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     cdc:	8859      	ldrh	r1, [r3, #2]
     cde:	4a0d      	ldr	r2, [pc, #52]	; (d14 <system_gclk_chan_disable+0x54>)
     ce0:	400a      	ands	r2, r1
     ce2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     ce4:	0019      	movs	r1, r3
     ce6:	2280      	movs	r2, #128	; 0x80
     ce8:	01d2      	lsls	r2, r2, #7
     cea:	884b      	ldrh	r3, [r1, #2]
     cec:	4213      	tst	r3, r2
     cee:	d1fc      	bne.n	cea <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     cf0:	4906      	ldr	r1, [pc, #24]	; (d0c <system_gclk_chan_disable+0x4c>)
     cf2:	884c      	ldrh	r4, [r1, #2]
     cf4:	0202      	lsls	r2, r0, #8
     cf6:	4b06      	ldr	r3, [pc, #24]	; (d10 <system_gclk_chan_disable+0x50>)
     cf8:	4023      	ands	r3, r4
     cfa:	4313      	orrs	r3, r2
     cfc:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     cfe:	4b06      	ldr	r3, [pc, #24]	; (d18 <system_gclk_chan_disable+0x58>)
     d00:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d02:	bd10      	pop	{r4, pc}
     d04:	00000645 	.word	0x00000645
     d08:	40000c02 	.word	0x40000c02
     d0c:	40000c00 	.word	0x40000c00
     d10:	fffff0ff 	.word	0xfffff0ff
     d14:	ffffbfff 	.word	0xffffbfff
     d18:	00000685 	.word	0x00000685

00000d1c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     d1c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     d1e:	780c      	ldrb	r4, [r1, #0]
     d20:	0224      	lsls	r4, r4, #8
     d22:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     d24:	4b02      	ldr	r3, [pc, #8]	; (d30 <system_gclk_chan_set_config+0x14>)
     d26:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     d28:	b2a4      	uxth	r4, r4
     d2a:	4b02      	ldr	r3, [pc, #8]	; (d34 <system_gclk_chan_set_config+0x18>)
     d2c:	805c      	strh	r4, [r3, #2]
}
     d2e:	bd10      	pop	{r4, pc}
     d30:	00000cc1 	.word	0x00000cc1
     d34:	40000c00 	.word	0x40000c00

00000d38 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     d38:	b510      	push	{r4, lr}
     d3a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     d3c:	4b06      	ldr	r3, [pc, #24]	; (d58 <system_gclk_chan_get_hz+0x20>)
     d3e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     d40:	4b06      	ldr	r3, [pc, #24]	; (d5c <system_gclk_chan_get_hz+0x24>)
     d42:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     d44:	4b06      	ldr	r3, [pc, #24]	; (d60 <system_gclk_chan_get_hz+0x28>)
     d46:	885c      	ldrh	r4, [r3, #2]
     d48:	0524      	lsls	r4, r4, #20
     d4a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     d4c:	4b05      	ldr	r3, [pc, #20]	; (d64 <system_gclk_chan_get_hz+0x2c>)
     d4e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     d50:	0020      	movs	r0, r4
     d52:	4b05      	ldr	r3, [pc, #20]	; (d68 <system_gclk_chan_get_hz+0x30>)
     d54:	4798      	blx	r3
}
     d56:	bd10      	pop	{r4, pc}
     d58:	00000645 	.word	0x00000645
     d5c:	40000c02 	.word	0x40000c02
     d60:	40000c00 	.word	0x40000c00
     d64:	00000685 	.word	0x00000685
     d68:	00000c05 	.word	0x00000c05

00000d6c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     d6c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     d6e:	78d3      	ldrb	r3, [r2, #3]
     d70:	2b00      	cmp	r3, #0
     d72:	d11e      	bne.n	db2 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     d74:	7813      	ldrb	r3, [r2, #0]
     d76:	2b80      	cmp	r3, #128	; 0x80
     d78:	d004      	beq.n	d84 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     d7a:	061b      	lsls	r3, r3, #24
     d7c:	2480      	movs	r4, #128	; 0x80
     d7e:	0264      	lsls	r4, r4, #9
     d80:	4323      	orrs	r3, r4
     d82:	e000      	b.n	d86 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     d84:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     d86:	7854      	ldrb	r4, [r2, #1]
     d88:	2502      	movs	r5, #2
     d8a:	43ac      	bics	r4, r5
     d8c:	d10a      	bne.n	da4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     d8e:	7894      	ldrb	r4, [r2, #2]
     d90:	2c00      	cmp	r4, #0
     d92:	d103      	bne.n	d9c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     d94:	2480      	movs	r4, #128	; 0x80
     d96:	02a4      	lsls	r4, r4, #10
     d98:	4323      	orrs	r3, r4
     d9a:	e002      	b.n	da2 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     d9c:	24c0      	movs	r4, #192	; 0xc0
     d9e:	02e4      	lsls	r4, r4, #11
     da0:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     da2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     da4:	7854      	ldrb	r4, [r2, #1]
     da6:	3c01      	subs	r4, #1
     da8:	2c01      	cmp	r4, #1
     daa:	d812      	bhi.n	dd2 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     dac:	4c18      	ldr	r4, [pc, #96]	; (e10 <_system_pinmux_config+0xa4>)
     dae:	4023      	ands	r3, r4
     db0:	e00f      	b.n	dd2 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     db2:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     db4:	040b      	lsls	r3, r1, #16
     db6:	0c1b      	lsrs	r3, r3, #16
     db8:	24a0      	movs	r4, #160	; 0xa0
     dba:	05e4      	lsls	r4, r4, #23
     dbc:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     dbe:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     dc0:	0c0b      	lsrs	r3, r1, #16
     dc2:	24d0      	movs	r4, #208	; 0xd0
     dc4:	0624      	lsls	r4, r4, #24
     dc6:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     dc8:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     dca:	78d3      	ldrb	r3, [r2, #3]
     dcc:	2b00      	cmp	r3, #0
     dce:	d018      	beq.n	e02 <_system_pinmux_config+0x96>
     dd0:	e01c      	b.n	e0c <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     dd2:	040c      	lsls	r4, r1, #16
     dd4:	0c24      	lsrs	r4, r4, #16
     dd6:	25a0      	movs	r5, #160	; 0xa0
     dd8:	05ed      	lsls	r5, r5, #23
     dda:	432c      	orrs	r4, r5
     ddc:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     dde:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     de0:	0c0c      	lsrs	r4, r1, #16
     de2:	25d0      	movs	r5, #208	; 0xd0
     de4:	062d      	lsls	r5, r5, #24
     de6:	432c      	orrs	r4, r5
     de8:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     dea:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     dec:	78d4      	ldrb	r4, [r2, #3]
     dee:	2c00      	cmp	r4, #0
     df0:	d10c      	bne.n	e0c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     df2:	035b      	lsls	r3, r3, #13
     df4:	d505      	bpl.n	e02 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     df6:	7893      	ldrb	r3, [r2, #2]
     df8:	2b01      	cmp	r3, #1
     dfa:	d101      	bne.n	e00 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
     dfc:	6181      	str	r1, [r0, #24]
     dfe:	e000      	b.n	e02 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
     e00:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     e02:	7853      	ldrb	r3, [r2, #1]
     e04:	3b01      	subs	r3, #1
     e06:	2b01      	cmp	r3, #1
     e08:	d800      	bhi.n	e0c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     e0a:	6081      	str	r1, [r0, #8]
		}
	}
}
     e0c:	bd30      	pop	{r4, r5, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	fffbffff 	.word	0xfffbffff

00000e14 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     e14:	b510      	push	{r4, lr}
     e16:	0003      	movs	r3, r0
     e18:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e1a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e1c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e1e:	2900      	cmp	r1, #0
     e20:	d104      	bne.n	e2c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
     e22:	0958      	lsrs	r0, r3, #5
     e24:	01c0      	lsls	r0, r0, #7
     e26:	4905      	ldr	r1, [pc, #20]	; (e3c <system_pinmux_pin_set_config+0x28>)
     e28:	468c      	mov	ip, r1
     e2a:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
     e2c:	211f      	movs	r1, #31
     e2e:	400b      	ands	r3, r1
     e30:	391e      	subs	r1, #30
     e32:	4099      	lsls	r1, r3
     e34:	4b02      	ldr	r3, [pc, #8]	; (e40 <system_pinmux_pin_set_config+0x2c>)
     e36:	4798      	blx	r3
}
     e38:	bd10      	pop	{r4, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	41004400 	.word	0x41004400
     e40:	00000d6d 	.word	0x00000d6d

00000e44 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     e44:	4770      	bx	lr
     e46:	46c0      	nop			; (mov r8, r8)

00000e48 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     e48:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     e4a:	4b05      	ldr	r3, [pc, #20]	; (e60 <system_init+0x18>)
     e4c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     e4e:	4b05      	ldr	r3, [pc, #20]	; (e64 <system_init+0x1c>)
     e50:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     e52:	4b05      	ldr	r3, [pc, #20]	; (e68 <system_init+0x20>)
     e54:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     e56:	4b05      	ldr	r3, [pc, #20]	; (e6c <system_init+0x24>)
     e58:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     e5a:	4b05      	ldr	r3, [pc, #20]	; (e70 <system_init+0x28>)
     e5c:	4798      	blx	r3
}
     e5e:	bd10      	pop	{r4, pc}
     e60:	00000991 	.word	0x00000991
     e64:	000006b5 	.word	0x000006b5
     e68:	00000e45 	.word	0x00000e45
     e6c:	00000e45 	.word	0x00000e45
     e70:	00000e45 	.word	0x00000e45

00000e74 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     e74:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     e76:	0080      	lsls	r0, r0, #2
     e78:	4b14      	ldr	r3, [pc, #80]	; (ecc <_tc_interrupt_handler+0x58>)
     e7a:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     e7c:	682b      	ldr	r3, [r5, #0]
     e7e:	7b9c      	ldrb	r4, [r3, #14]
     e80:	7e2b      	ldrb	r3, [r5, #24]
     e82:	401c      	ands	r4, r3
     e84:	7e6b      	ldrb	r3, [r5, #25]
     e86:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     e88:	07e3      	lsls	r3, r4, #31
     e8a:	d505      	bpl.n	e98 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     e8c:	0028      	movs	r0, r5
     e8e:	68ab      	ldr	r3, [r5, #8]
     e90:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     e92:	2301      	movs	r3, #1
     e94:	682a      	ldr	r2, [r5, #0]
     e96:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     e98:	07a3      	lsls	r3, r4, #30
     e9a:	d505      	bpl.n	ea8 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     e9c:	0028      	movs	r0, r5
     e9e:	68eb      	ldr	r3, [r5, #12]
     ea0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     ea2:	2302      	movs	r3, #2
     ea4:	682a      	ldr	r2, [r5, #0]
     ea6:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     ea8:	06e3      	lsls	r3, r4, #27
     eaa:	d505      	bpl.n	eb8 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     eac:	0028      	movs	r0, r5
     eae:	692b      	ldr	r3, [r5, #16]
     eb0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     eb2:	2310      	movs	r3, #16
     eb4:	682a      	ldr	r2, [r5, #0]
     eb6:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     eb8:	06a3      	lsls	r3, r4, #26
     eba:	d505      	bpl.n	ec8 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     ebc:	0028      	movs	r0, r5
     ebe:	696b      	ldr	r3, [r5, #20]
     ec0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     ec2:	682b      	ldr	r3, [r5, #0]
     ec4:	2220      	movs	r2, #32
     ec6:	739a      	strb	r2, [r3, #14]
	}
}
     ec8:	bd70      	pop	{r4, r5, r6, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	200000ec 	.word	0x200000ec

00000ed0 <TC1_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     ed0:	b510      	push	{r4, lr}
     ed2:	2000      	movs	r0, #0
     ed4:	4b01      	ldr	r3, [pc, #4]	; (edc <TC1_Handler+0xc>)
     ed6:	4798      	blx	r3
     ed8:	bd10      	pop	{r4, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	00000e75 	.word	0x00000e75

00000ee0 <TC2_Handler>:
     ee0:	b510      	push	{r4, lr}
     ee2:	2001      	movs	r0, #1
     ee4:	4b01      	ldr	r3, [pc, #4]	; (eec <TC2_Handler+0xc>)
     ee6:	4798      	blx	r3
     ee8:	bd10      	pop	{r4, pc}
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	00000e75 	.word	0x00000e75

00000ef0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     ef0:	e7fe      	b.n	ef0 <Dummy_Handler>
     ef2:	46c0      	nop			; (mov r8, r8)

00000ef4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     ef4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     ef6:	4b2b      	ldr	r3, [pc, #172]	; (fa4 <Reset_Handler+0xb0>)
     ef8:	4a2b      	ldr	r2, [pc, #172]	; (fa8 <Reset_Handler+0xb4>)
     efa:	429a      	cmp	r2, r3
     efc:	d003      	beq.n	f06 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     efe:	4b2b      	ldr	r3, [pc, #172]	; (fac <Reset_Handler+0xb8>)
     f00:	4a28      	ldr	r2, [pc, #160]	; (fa4 <Reset_Handler+0xb0>)
     f02:	429a      	cmp	r2, r3
     f04:	d304      	bcc.n	f10 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     f06:	4b2a      	ldr	r3, [pc, #168]	; (fb0 <Reset_Handler+0xbc>)
     f08:	4a2a      	ldr	r2, [pc, #168]	; (fb4 <Reset_Handler+0xc0>)
     f0a:	429a      	cmp	r2, r3
     f0c:	d310      	bcc.n	f30 <Reset_Handler+0x3c>
     f0e:	e01e      	b.n	f4e <Reset_Handler+0x5a>
     f10:	4a29      	ldr	r2, [pc, #164]	; (fb8 <Reset_Handler+0xc4>)
     f12:	4b26      	ldr	r3, [pc, #152]	; (fac <Reset_Handler+0xb8>)
     f14:	3303      	adds	r3, #3
     f16:	1a9b      	subs	r3, r3, r2
     f18:	089b      	lsrs	r3, r3, #2
     f1a:	3301      	adds	r3, #1
     f1c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     f1e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     f20:	4820      	ldr	r0, [pc, #128]	; (fa4 <Reset_Handler+0xb0>)
     f22:	4921      	ldr	r1, [pc, #132]	; (fa8 <Reset_Handler+0xb4>)
     f24:	588c      	ldr	r4, [r1, r2]
     f26:	5084      	str	r4, [r0, r2]
     f28:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     f2a:	429a      	cmp	r2, r3
     f2c:	d1fa      	bne.n	f24 <Reset_Handler+0x30>
     f2e:	e7ea      	b.n	f06 <Reset_Handler+0x12>
     f30:	4a22      	ldr	r2, [pc, #136]	; (fbc <Reset_Handler+0xc8>)
     f32:	4b1f      	ldr	r3, [pc, #124]	; (fb0 <Reset_Handler+0xbc>)
     f34:	3303      	adds	r3, #3
     f36:	1a9b      	subs	r3, r3, r2
     f38:	089b      	lsrs	r3, r3, #2
     f3a:	3301      	adds	r3, #1
     f3c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     f3e:	2200      	movs	r2, #0
                *pDest++ = 0;
     f40:	481c      	ldr	r0, [pc, #112]	; (fb4 <Reset_Handler+0xc0>)
     f42:	2100      	movs	r1, #0
     f44:	1814      	adds	r4, r2, r0
     f46:	6021      	str	r1, [r4, #0]
     f48:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     f4a:	429a      	cmp	r2, r3
     f4c:	d1fa      	bne.n	f44 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f4e:	4a1c      	ldr	r2, [pc, #112]	; (fc0 <Reset_Handler+0xcc>)
     f50:	21ff      	movs	r1, #255	; 0xff
     f52:	4b1c      	ldr	r3, [pc, #112]	; (fc4 <Reset_Handler+0xd0>)
     f54:	438b      	bics	r3, r1
     f56:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     f58:	39fd      	subs	r1, #253	; 0xfd
     f5a:	2390      	movs	r3, #144	; 0x90
     f5c:	005b      	lsls	r3, r3, #1
     f5e:	4a1a      	ldr	r2, [pc, #104]	; (fc8 <Reset_Handler+0xd4>)
     f60:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     f62:	4b1a      	ldr	r3, [pc, #104]	; (fcc <Reset_Handler+0xd8>)
     f64:	7b9a      	ldrb	r2, [r3, #14]
     f66:	312e      	adds	r1, #46	; 0x2e
     f68:	438a      	bics	r2, r1
     f6a:	0011      	movs	r1, r2
     f6c:	2220      	movs	r2, #32
     f6e:	430a      	orrs	r2, r1
     f70:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     f72:	7b9a      	ldrb	r2, [r3, #14]
     f74:	210c      	movs	r1, #12
     f76:	438a      	bics	r2, r1
     f78:	0011      	movs	r1, r2
     f7a:	2208      	movs	r2, #8
     f7c:	430a      	orrs	r2, r1
     f7e:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     f80:	7b9a      	ldrb	r2, [r3, #14]
     f82:	2103      	movs	r1, #3
     f84:	438a      	bics	r2, r1
     f86:	0011      	movs	r1, r2
     f88:	2202      	movs	r2, #2
     f8a:	430a      	orrs	r2, r1
     f8c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     f8e:	4a10      	ldr	r2, [pc, #64]	; (fd0 <Reset_Handler+0xdc>)
     f90:	6851      	ldr	r1, [r2, #4]
     f92:	2380      	movs	r3, #128	; 0x80
     f94:	430b      	orrs	r3, r1
     f96:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     f98:	4b0e      	ldr	r3, [pc, #56]	; (fd4 <Reset_Handler+0xe0>)
     f9a:	4798      	blx	r3

        /* Branch to main function */
        main();
     f9c:	4b0e      	ldr	r3, [pc, #56]	; (fd8 <Reset_Handler+0xe4>)
     f9e:	4798      	blx	r3
     fa0:	e7fe      	b.n	fa0 <Reset_Handler+0xac>
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	20000000 	.word	0x20000000
     fa8:	000018dc 	.word	0x000018dc
     fac:	20000070 	.word	0x20000070
     fb0:	20000108 	.word	0x20000108
     fb4:	20000070 	.word	0x20000070
     fb8:	20000004 	.word	0x20000004
     fbc:	20000074 	.word	0x20000074
     fc0:	e000ed00 	.word	0xe000ed00
     fc4:	00000000 	.word	0x00000000
     fc8:	41007000 	.word	0x41007000
     fcc:	41004800 	.word	0x41004800
     fd0:	41004000 	.word	0x41004000
     fd4:	0000168d 	.word	0x0000168d
     fd8:	000012ed 	.word	0x000012ed

00000fdc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     fdc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     fde:	4a06      	ldr	r2, [pc, #24]	; (ff8 <_sbrk+0x1c>)
     fe0:	6812      	ldr	r2, [r2, #0]
     fe2:	2a00      	cmp	r2, #0
     fe4:	d102      	bne.n	fec <_sbrk+0x10>
		heap = (unsigned char *)&_end;
     fe6:	4905      	ldr	r1, [pc, #20]	; (ffc <_sbrk+0x20>)
     fe8:	4a03      	ldr	r2, [pc, #12]	; (ff8 <_sbrk+0x1c>)
     fea:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
     fec:	4a02      	ldr	r2, [pc, #8]	; (ff8 <_sbrk+0x1c>)
     fee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     ff0:	18c3      	adds	r3, r0, r3
     ff2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
     ff4:	4770      	bx	lr
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	200000bc 	.word	0x200000bc
     ffc:	20000508 	.word	0x20000508

00001000 <spiSend>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1000:	4b0a      	ldr	r3, [pc, #40]	; (102c <spiSend+0x2c>)
    1002:	681b      	ldr	r3, [r3, #0]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
	spi_enable(&spi_master_instance);
}

static void spiSend(uint16_t cmd){
	while(!spi_is_ready_to_write(&spi_master_instance)){;}
    1004:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1006:	7e1a      	ldrb	r2, [r3, #24]
    1008:	420a      	tst	r2, r1
    100a:	d0fc      	beq.n	1006 <spiSend+0x6>
    100c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    100e:	07d2      	lsls	r2, r2, #31
    1010:	d501      	bpl.n	1016 <spiSend+0x16>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1012:	0a02      	lsrs	r2, r0, #8
    1014:	629a      	str	r2, [r3, #40]	; 0x28
	spi_write(&spi_master_instance,cmd>>8);
	while(!spi_is_ready_to_write(&spi_master_instance)){;}
    1016:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1018:	7e1a      	ldrb	r2, [r3, #24]
    101a:	420a      	tst	r2, r1
    101c:	d0fc      	beq.n	1018 <spiSend+0x18>
    101e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1020:	07d2      	lsls	r2, r2, #31
    1022:	d502      	bpl.n	102a <spiSend+0x2a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1024:	05c0      	lsls	r0, r0, #23
    1026:	0dc0      	lsrs	r0, r0, #23
    1028:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&spi_master_instance,cmd);
}
    102a:	4770      	bx	lr
    102c:	200000f4 	.word	0x200000f4

00001030 <sendByte>:

static void sendByte (int value) {
    1030:	b570      	push	{r4, r5, r6, lr}
    1032:	0004      	movs	r4, r0
	spiSend(bits[value >> 4]);
    1034:	4e05      	ldr	r6, [pc, #20]	; (104c <sendByte+0x1c>)
    1036:	1103      	asrs	r3, r0, #4
    1038:	005b      	lsls	r3, r3, #1
    103a:	5b98      	ldrh	r0, [r3, r6]
    103c:	4d04      	ldr	r5, [pc, #16]	; (1050 <sendByte+0x20>)
    103e:	47a8      	blx	r5
	spiSend(bits[value & 0xF]);
    1040:	230f      	movs	r3, #15
    1042:	401c      	ands	r4, r3
    1044:	0064      	lsls	r4, r4, #1
    1046:	5ba0      	ldrh	r0, [r4, r6]
    1048:	47a8      	blx	r5
}
    104a:	bd70      	pop	{r4, r5, r6, pc}
    104c:	00001898 	.word	0x00001898
    1050:	00001001 	.word	0x00001001

00001054 <showStrip>:
		delay_ms(50); 
	}
}

// wrapper for LED animations
static void showStrip(void){
    1054:	b5f0      	push	{r4, r5, r6, r7, lr}
    1056:	4647      	mov	r7, r8
    1058:	b480      	push	{r7}
	spiSend(0);
    105a:	2000      	movs	r0, #0
    105c:	4c0b      	ldr	r4, [pc, #44]	; (108c <showStrip+0x38>)
    105e:	47a0      	blx	r4
	spiSend(0);
    1060:	2000      	movs	r0, #0
    1062:	47a0      	blx	r4
    1064:	4c0a      	ldr	r4, [pc, #40]	; (1090 <showStrip+0x3c>)
    1066:	2324      	movs	r3, #36	; 0x24
    1068:	4698      	mov	r8, r3
    106a:	44a0      	add	r8, r4
	spiSend(bits[value >> 4]);
	spiSend(bits[value & 0xF]);
}

static void sendRGB (int r, int g, int b) {
	sendByte(g);
    106c:	4d09      	ldr	r5, [pc, #36]	; (1094 <showStrip+0x40>)
// wrapper for LED animations
static void showStrip(void){
	spiSend(0);
	spiSend(0);
	for(int i=0;i<NUM_LEDS;i++){
		sendRGB(pixelArray[i][0],pixelArray[i][1],pixelArray[i][2]);
    106e:	7827      	ldrb	r7, [r4, #0]
    1070:	78a6      	ldrb	r6, [r4, #2]
	spiSend(bits[value >> 4]);
	spiSend(bits[value & 0xF]);
}

static void sendRGB (int r, int g, int b) {
	sendByte(g);
    1072:	7860      	ldrb	r0, [r4, #1]
    1074:	47a8      	blx	r5
	sendByte(r);
    1076:	0038      	movs	r0, r7
    1078:	47a8      	blx	r5
	sendByte(b);
    107a:	0030      	movs	r0, r6
    107c:	47a8      	blx	r5
    107e:	3403      	adds	r4, #3

// wrapper for LED animations
static void showStrip(void){
	spiSend(0);
	spiSend(0);
	for(int i=0;i<NUM_LEDS;i++){
    1080:	4544      	cmp	r4, r8
    1082:	d1f4      	bne.n	106e <showStrip+0x1a>
		sendRGB(pixelArray[i][0],pixelArray[i][1],pixelArray[i][2]);
	}
}
    1084:	bc04      	pop	{r2}
    1086:	4690      	mov	r8, r2
    1088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	00001001 	.word	0x00001001
    1090:	200000c0 	.word	0x200000c0
    1094:	00001031 	.word	0x00001031

00001098 <setAll>:
static uint32_t getPixel(int count){
	uint32_t val = pixelArray[count][0]<<16|pixelArray[count][1]<<8|pixelArray[count][2];
	return val;
}

static void setAll(int r, int g, int b){
    1098:	b510      	push	{r4, lr}
    109a:	4b05      	ldr	r3, [pc, #20]	; (10b0 <setAll+0x18>)
    109c:	001c      	movs	r4, r3
    109e:	3424      	adds	r4, #36	; 0x24
		sendRGB(pixelArray[i][0],pixelArray[i][1],pixelArray[i][2]);
	}
}

static void setPixel(int count, int r, int g, int b){
	pixelArray[count][0] = r;
    10a0:	7018      	strb	r0, [r3, #0]
	pixelArray[count][1] = g;
    10a2:	7059      	strb	r1, [r3, #1]
	pixelArray[count][2] = b;
    10a4:	709a      	strb	r2, [r3, #2]
    10a6:	3303      	adds	r3, #3
	uint32_t val = pixelArray[count][0]<<16|pixelArray[count][1]<<8|pixelArray[count][2];
	return val;
}

static void setAll(int r, int g, int b){
	for (int i = 0;i<NUM_LEDS;i++){
    10a8:	42a3      	cmp	r3, r4
    10aa:	d1f9      	bne.n	10a0 <setAll+0x8>
		setPixel(i,r,g,b);
	}
}
    10ac:	bd10      	pop	{r4, pc}
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	200000c0 	.word	0x200000c0

000010b4 <configure_spi_master>:
// baud_rate = ((clock input freq/clock_divider+1)/2)) 
// fref =  48MHz
// fbaud = fref/2(BAUD+1)

void configure_spi_master(void)
{
    10b4:	b530      	push	{r4, r5, lr}
    10b6:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    10b8:	4c27      	ldr	r4, [pc, #156]	; (1158 <configure_spi_master+0xa4>)
    10ba:	2311      	movs	r3, #17
    10bc:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    10be:	2300      	movs	r3, #0
    10c0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    10c2:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    10c4:	a901      	add	r1, sp, #4
    10c6:	2201      	movs	r2, #1
    10c8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    10ca:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    10cc:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    10ce:	2011      	movs	r0, #17
    10d0:	4b22      	ldr	r3, [pc, #136]	; (115c <configure_spi_master+0xa8>)
    10d2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    10d4:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10d6:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    10d8:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10da:	2a00      	cmp	r2, #0
    10dc:	d104      	bne.n	10e8 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    10de:	0959      	lsrs	r1, r3, #5
    10e0:	01c9      	lsls	r1, r1, #7
    10e2:	4a1f      	ldr	r2, [pc, #124]	; (1160 <configure_spi_master+0xac>)
    10e4:	4694      	mov	ip, r2
    10e6:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    10e8:	221f      	movs	r2, #31
    10ea:	4013      	ands	r3, r2
    10ec:	3a1e      	subs	r2, #30
    10ee:	0010      	movs	r0, r2
    10f0:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    10f2:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    10f4:	ac02      	add	r4, sp, #8
    10f6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    10f8:	2300      	movs	r3, #0
    10fa:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    10fc:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    10fe:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1100:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1102:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1104:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1106:	3223      	adds	r2, #35	; 0x23
    1108:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    110a:	3a18      	subs	r2, #24
    110c:	2100      	movs	r1, #0
    110e:	a808      	add	r0, sp, #32
    1110:	4b14      	ldr	r3, [pc, #80]	; (1164 <configure_spi_master+0xb0>)
    1112:	4798      	blx	r3
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;
    1114:	2380      	movs	r3, #128	; 0x80
    1116:	055b      	lsls	r3, r3, #21
    1118:	60a3      	str	r3, [r4, #8]
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
    111a:	2380      	movs	r3, #128	; 0x80
    111c:	039b      	lsls	r3, r3, #14
    111e:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    1120:	4b11      	ldr	r3, [pc, #68]	; (1168 <configure_spi_master+0xb4>)
    1122:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    1124:	4b11      	ldr	r3, [pc, #68]	; (116c <configure_spi_master+0xb8>)
    1126:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    1128:	4b11      	ldr	r3, [pc, #68]	; (1170 <configure_spi_master+0xbc>)
    112a:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    112c:	2301      	movs	r3, #1
    112e:	425b      	negs	r3, r3
    1130:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate =  2500000; //2.5MHz  = 400ns per signal
    1132:	4b10      	ldr	r3, [pc, #64]	; (1174 <configure_spi_master+0xc0>)
    1134:	61a3      	str	r3, [r4, #24]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    1136:	4d10      	ldr	r5, [pc, #64]	; (1178 <configure_spi_master+0xc4>)
    1138:	0022      	movs	r2, r4
    113a:	4910      	ldr	r1, [pc, #64]	; (117c <configure_spi_master+0xc8>)
    113c:	0028      	movs	r0, r5
    113e:	4b10      	ldr	r3, [pc, #64]	; (1180 <configure_spi_master+0xcc>)
    1140:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1142:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1144:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1146:	2b00      	cmp	r3, #0
    1148:	d1fc      	bne.n	1144 <configure_spi_master+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    114a:	6811      	ldr	r1, [r2, #0]
    114c:	3302      	adds	r3, #2
    114e:	430b      	orrs	r3, r1
    1150:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
}
    1152:	b011      	add	sp, #68	; 0x44
    1154:	bd30      	pop	{r4, r5, pc}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	20000100 	.word	0x20000100
    115c:	000006ed 	.word	0x000006ed
    1160:	41004400 	.word	0x41004400
    1164:	000016d9 	.word	0x000016d9
    1168:	00160002 	.word	0x00160002
    116c:	00170002 	.word	0x00170002
    1170:	00180002 	.word	0x00180002
    1174:	002625a0 	.word	0x002625a0
    1178:	200000f4 	.word	0x200000f4
    117c:	42000c00 	.word	0x42000c00
    1180:	00000325 	.word	0x00000325

00001184 <fadeToBlack>:

	showStrip();
	delay(SpeedDelay);
}

void fadeToBlack(int ledNo, uint8_t fadeValue) {
    1184:	b5f0      	push	{r4, r5, r6, r7, lr}
    1186:	4647      	mov	r7, r8
    1188:	b480      	push	{r7}
    118a:	b082      	sub	sp, #8
	pixelArray[count][1] = g;
	pixelArray[count][2] = b;
}

static uint32_t getPixel(int count){
	uint32_t val = pixelArray[count][0]<<16|pixelArray[count][1]<<8|pixelArray[count][2];
    118c:	4d1c      	ldr	r5, [pc, #112]	; (1200 <fadeToBlack+0x7c>)
    118e:	0043      	lsls	r3, r0, #1
    1190:	181b      	adds	r3, r3, r0
    1192:	5d5a      	ldrb	r2, [r3, r5]
    1194:	0414      	lsls	r4, r2, #16
    1196:	18eb      	adds	r3, r5, r3
    1198:	785a      	ldrb	r2, [r3, #1]
    119a:	0212      	lsls	r2, r2, #8
    119c:	4322      	orrs	r2, r4
    119e:	789b      	ldrb	r3, [r3, #2]
    11a0:	4313      	orrs	r3, r2
	uint32_t oldColor;
	uint8_t r, g, b;
	int value;
	
	oldColor = getPixel(ledNo);
	r = (oldColor & 0x00ff0000UL) >> 16;
    11a2:	0c1c      	lsrs	r4, r3, #16
    11a4:	b2e2      	uxtb	r2, r4
    11a6:	4694      	mov	ip, r2
	g = (oldColor & 0x0000ff00UL) >> 8;
    11a8:	0a1a      	lsrs	r2, r3, #8
    11aa:	4690      	mov	r8, r2
    11ac:	466d      	mov	r5, sp
    11ae:	71ea      	strb	r2, [r5, #7]
    11b0:	79ef      	ldrb	r7, [r5, #7]
	b = (oldColor & 0x000000ffUL);
    11b2:	b2de      	uxtb	r6, r3

	r=(r<=10)? 0 : (int) r-(r*fadeValue/256);
    11b4:	2500      	movs	r5, #0
    11b6:	4662      	mov	r2, ip
    11b8:	2a0a      	cmp	r2, #10
    11ba:	d903      	bls.n	11c4 <fadeToBlack+0x40>
    11bc:	434c      	muls	r4, r1
    11be:	1224      	asrs	r4, r4, #8
    11c0:	1b14      	subs	r4, r2, r4
    11c2:	b2e5      	uxtb	r5, r4
	g=(g<=10)? 0 : (int) g-(g*fadeValue/256);
    11c4:	2400      	movs	r4, #0
    11c6:	2f0a      	cmp	r7, #10
    11c8:	d906      	bls.n	11d8 <fadeToBlack+0x54>
    11ca:	34ff      	adds	r4, #255	; 0xff
    11cc:	4642      	mov	r2, r8
    11ce:	4022      	ands	r2, r4
    11d0:	434a      	muls	r2, r1
    11d2:	1212      	asrs	r2, r2, #8
    11d4:	1aba      	subs	r2, r7, r2
    11d6:	b2d4      	uxtb	r4, r2
	b=(b<=10)? 0 : (int) b-(b*fadeValue/256);
    11d8:	2700      	movs	r7, #0
    11da:	2e0a      	cmp	r6, #10
    11dc:	d905      	bls.n	11ea <fadeToBlack+0x66>
    11de:	22ff      	movs	r2, #255	; 0xff
    11e0:	4013      	ands	r3, r2
    11e2:	434b      	muls	r3, r1
    11e4:	121b      	asrs	r3, r3, #8
    11e6:	1af3      	subs	r3, r6, r3
    11e8:	b2df      	uxtb	r7, r3
		sendRGB(pixelArray[i][0],pixelArray[i][1],pixelArray[i][2]);
	}
}

static void setPixel(int count, int r, int g, int b){
	pixelArray[count][0] = r;
    11ea:	4a05      	ldr	r2, [pc, #20]	; (1200 <fadeToBlack+0x7c>)
    11ec:	0043      	lsls	r3, r0, #1
    11ee:	1818      	adds	r0, r3, r0
    11f0:	5485      	strb	r5, [r0, r2]
	pixelArray[count][1] = g;
    11f2:	1810      	adds	r0, r2, r0
    11f4:	7044      	strb	r4, [r0, #1]
	pixelArray[count][2] = b;
    11f6:	7087      	strb	r7, [r0, #2]
	b=(b<=10)? 0 : (int) b-(b*fadeValue/256);
	
	setPixel(ledNo, r,g,b);


}
    11f8:	b002      	add	sp, #8
    11fa:	bc04      	pop	{r2}
    11fc:	4690      	mov	r8, r2
    11fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1200:	200000c0 	.word	0x200000c0

00001204 <meteorRain>:

void meteorRain(uint8_t red, uint8_t green, uint8_t blue, uint8_t meteorSize, uint8_t meteorTrailDecay, bool meteorRandomDecay, int SpeedDelay) {
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	465f      	mov	r7, fp
    1208:	4656      	mov	r6, sl
    120a:	464d      	mov	r5, r9
    120c:	4644      	mov	r4, r8
    120e:	b4f0      	push	{r4, r5, r6, r7}
    1210:	b087      	sub	sp, #28
    1212:	4683      	mov	fp, r0
    1214:	9102      	str	r1, [sp, #8]
    1216:	4692      	mov	sl, r2
    1218:	001c      	movs	r4, r3
    121a:	9304      	str	r3, [sp, #16]
    121c:	ab10      	add	r3, sp, #64	; 0x40
    121e:	781a      	ldrb	r2, [r3, #0]
    1220:	9201      	str	r2, [sp, #4]
    1222:	ab11      	add	r3, sp, #68	; 0x44
    1224:	781e      	ldrb	r6, [r3, #0]
	setAll(0,0,0);
    1226:	2200      	movs	r2, #0
    1228:	2100      	movs	r1, #0
    122a:	2000      	movs	r0, #0
    122c:	4b27      	ldr	r3, [pc, #156]	; (12cc <meteorRain+0xc8>)
    122e:	4798      	blx	r3
    1230:	00a5      	lsls	r5, r4, #2
    1232:	1b63      	subs	r3, r4, r5
    1234:	4d26      	ldr	r5, [pc, #152]	; (12d0 <meteorRain+0xcc>)
    1236:	18ed      	adds	r5, r5, r3
    1238:	0063      	lsls	r3, r4, #1
    123a:	0019      	movs	r1, r3
    123c:	46a4      	mov	ip, r4
    123e:	4461      	add	r1, ip
    1240:	9105      	str	r1, [sp, #20]
	
	for(int i = 0; i < NUM_LEDS+NUM_LEDS; i++) {
    1242:	2300      	movs	r3, #0
    1244:	9303      	str	r3, [sp, #12]
		
		
		// fade brightness all LEDs one step
		for(int j=0; j<NUM_LEDS; j++) {
			if( (!meteorRandomDecay) || (random_range(0,10)>5) ) {
				fadeToBlack(j, meteorTrailDecay );
    1246:	4f23      	ldr	r7, [pc, #140]	; (12d4 <meteorRain+0xd0>)
		setPixel(i,r,g,b);
	}
}

static int random_range(int min, int max){
	return rand()%(max-min)+min;
    1248:	4b23      	ldr	r3, [pc, #140]	; (12d8 <meteorRain+0xd4>)
    124a:	4699      	mov	r9, r3
	for(int i = 0; i < NUM_LEDS+NUM_LEDS; i++) {
		
		
		// fade brightness all LEDs one step
		for(int j=0; j<NUM_LEDS; j++) {
			if( (!meteorRandomDecay) || (random_range(0,10)>5) ) {
    124c:	4b23      	ldr	r3, [pc, #140]	; (12dc <meteorRain+0xd8>)
    124e:	4698      	mov	r8, r3
    1250:	e033      	b.n	12ba <meteorRain+0xb6>
    1252:	2e00      	cmp	r6, #0
    1254:	d004      	beq.n	1260 <meteorRain+0x5c>
		setPixel(i,r,g,b);
	}
}

static int random_range(int min, int max){
	return rand()%(max-min)+min;
    1256:	47c8      	blx	r9
	for(int i = 0; i < NUM_LEDS+NUM_LEDS; i++) {
		
		
		// fade brightness all LEDs one step
		for(int j=0; j<NUM_LEDS; j++) {
			if( (!meteorRandomDecay) || (random_range(0,10)>5) ) {
    1258:	210a      	movs	r1, #10
    125a:	47c0      	blx	r8
    125c:	2905      	cmp	r1, #5
    125e:	dd02      	ble.n	1266 <meteorRain+0x62>
				fadeToBlack(j, meteorTrailDecay );
    1260:	9901      	ldr	r1, [sp, #4]
    1262:	0020      	movs	r0, r4
    1264:	47b8      	blx	r7
	
	for(int i = 0; i < NUM_LEDS+NUM_LEDS; i++) {
		
		
		// fade brightness all LEDs one step
		for(int j=0; j<NUM_LEDS; j++) {
    1266:	3401      	adds	r4, #1
    1268:	2c0c      	cmp	r4, #12
    126a:	d1f2      	bne.n	1252 <meteorRain+0x4e>
				fadeToBlack(j, meteorTrailDecay );
			}
		}
		
		// draw meteor
		for(int j = 0; j < meteorSize; j++) {
    126c:	9b04      	ldr	r3, [sp, #16]
    126e:	2b00      	cmp	r3, #0
    1270:	dd11      	ble.n	1296 <meteorRain+0x92>
    1272:	9a03      	ldr	r2, [sp, #12]
    1274:	9b05      	ldr	r3, [sp, #20]
    1276:	18eb      	adds	r3, r5, r3
    1278:	4659      	mov	r1, fp
    127a:	4650      	mov	r0, sl
			if( ( i-j <NUM_LEDS) && (i-j>=0) ) {
    127c:	2a0b      	cmp	r2, #11
    127e:	d804      	bhi.n	128a <meteorRain+0x86>
		sendRGB(pixelArray[i][0],pixelArray[i][1],pixelArray[i][2]);
	}
}

static void setPixel(int count, int r, int g, int b){
	pixelArray[count][0] = r;
    1280:	7019      	strb	r1, [r3, #0]
	pixelArray[count][1] = g;
    1282:	466c      	mov	r4, sp
    1284:	7a24      	ldrb	r4, [r4, #8]
    1286:	705c      	strb	r4, [r3, #1]
	pixelArray[count][2] = b;
    1288:	7098      	strb	r0, [r3, #2]
    128a:	3a01      	subs	r2, #1
    128c:	3b03      	subs	r3, #3
				fadeToBlack(j, meteorTrailDecay );
			}
		}
		
		// draw meteor
		for(int j = 0; j < meteorSize; j++) {
    128e:	42ab      	cmp	r3, r5
    1290:	d1f4      	bne.n	127c <meteorRain+0x78>
    1292:	468b      	mov	fp, r1
    1294:	4682      	mov	sl, r0
			if( ( i-j <NUM_LEDS) && (i-j>=0) ) {
				setPixel(i-j, red, green, blue);
			}
		}
		
		showStrip();
    1296:	4b12      	ldr	r3, [pc, #72]	; (12e0 <meteorRain+0xdc>)
    1298:	4798      	blx	r3
static int random_range(int min, int max){
	return rand()%(max-min)+min;
}

static void delay(int delay_time){
	delay_ms(delay_time);
    129a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    129c:	2b00      	cmp	r3, #0
    129e:	d003      	beq.n	12a8 <meteorRain+0xa4>
    12a0:	0018      	movs	r0, r3
    12a2:	4b10      	ldr	r3, [pc, #64]	; (12e4 <meteorRain+0xe0>)
    12a4:	4798      	blx	r3
    12a6:	e002      	b.n	12ae <meteorRain+0xaa>
    12a8:	2001      	movs	r0, #1
    12aa:	4b0f      	ldr	r3, [pc, #60]	; (12e8 <meteorRain+0xe4>)
    12ac:	4798      	blx	r3
}

void meteorRain(uint8_t red, uint8_t green, uint8_t blue, uint8_t meteorSize, uint8_t meteorTrailDecay, bool meteorRandomDecay, int SpeedDelay) {
	setAll(0,0,0);
	
	for(int i = 0; i < NUM_LEDS+NUM_LEDS; i++) {
    12ae:	9b03      	ldr	r3, [sp, #12]
    12b0:	3301      	adds	r3, #1
    12b2:	9303      	str	r3, [sp, #12]
    12b4:	3503      	adds	r5, #3
    12b6:	2b18      	cmp	r3, #24
    12b8:	d001      	beq.n	12be <meteorRain+0xba>
	setPixel(ledNo, r,g,b);


}

void meteorRain(uint8_t red, uint8_t green, uint8_t blue, uint8_t meteorSize, uint8_t meteorTrailDecay, bool meteorRandomDecay, int SpeedDelay) {
    12ba:	2400      	movs	r4, #0
    12bc:	e7c9      	b.n	1252 <meteorRain+0x4e>
		}
		
		showStrip();
		delay(SpeedDelay);
	}
}
    12be:	b007      	add	sp, #28
    12c0:	bc3c      	pop	{r2, r3, r4, r5}
    12c2:	4690      	mov	r8, r2
    12c4:	4699      	mov	r9, r3
    12c6:	46a2      	mov	sl, r4
    12c8:	46ab      	mov	fp, r5
    12ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12cc:	00001099 	.word	0x00001099
    12d0:	200000c0 	.word	0x200000c0
    12d4:	00001185 	.word	0x00001185
    12d8:	000016e9 	.word	0x000016e9
    12dc:	00001629 	.word	0x00001629
    12e0:	00001055 	.word	0x00001055
    12e4:	00000159 	.word	0x00000159
    12e8:	0000012d 	.word	0x0000012d

000012ec <main>:



int main (void)
{
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	b084      	sub	sp, #16
	system_init();
    12f0:	4b0e      	ldr	r3, [pc, #56]	; (132c <main+0x40>)
    12f2:	4798      	blx	r3
	delay_init();
    12f4:	4b0e      	ldr	r3, [pc, #56]	; (1330 <main+0x44>)
    12f6:	4798      	blx	r3

	
	configure_spi_master();
    12f8:	4b0e      	ldr	r3, [pc, #56]	; (1334 <main+0x48>)
    12fa:	4798      	blx	r3
	setAll(0,0,0);
    12fc:	2200      	movs	r2, #0
    12fe:	2100      	movs	r1, #0
    1300:	2000      	movs	r0, #0
    1302:	4b0d      	ldr	r3, [pc, #52]	; (1338 <main+0x4c>)
    1304:	4798      	blx	r3
	showStrip();
    1306:	4b0d      	ldr	r3, [pc, #52]	; (133c <main+0x50>)
    1308:	4798      	blx	r3
	
	while (1) {
		meteorRain(0xff,0xff,0xff,1, 200, true, 60);
    130a:	2401      	movs	r4, #1
    130c:	4e0c      	ldr	r6, [pc, #48]	; (1340 <main+0x54>)
static int random_range(int min, int max){
	return rand()%(max-min)+min;
}

static void delay(int delay_time){
	delay_ms(delay_time);
    130e:	4d0d      	ldr	r5, [pc, #52]	; (1344 <main+0x58>)
	configure_spi_master();
	setAll(0,0,0);
	showStrip();
	
	while (1) {
		meteorRain(0xff,0xff,0xff,1, 200, true, 60);
    1310:	233c      	movs	r3, #60	; 0x3c
    1312:	9302      	str	r3, [sp, #8]
    1314:	9401      	str	r4, [sp, #4]
    1316:	338c      	adds	r3, #140	; 0x8c
    1318:	9300      	str	r3, [sp, #0]
    131a:	0023      	movs	r3, r4
    131c:	22ff      	movs	r2, #255	; 0xff
    131e:	21ff      	movs	r1, #255	; 0xff
    1320:	20ff      	movs	r0, #255	; 0xff
    1322:	47b0      	blx	r6
static int random_range(int min, int max){
	return rand()%(max-min)+min;
}

static void delay(int delay_time){
	delay_ms(delay_time);
    1324:	2032      	movs	r0, #50	; 0x32
    1326:	47a8      	blx	r5
    1328:	e7f2      	b.n	1310 <main+0x24>
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	00000e49 	.word	0x00000e49
    1330:	000000ed 	.word	0x000000ed
    1334:	000010b5 	.word	0x000010b5
    1338:	00001099 	.word	0x00001099
    133c:	00001055 	.word	0x00001055
    1340:	00001205 	.word	0x00001205
    1344:	00000159 	.word	0x00000159

00001348 <__aeabi_uidiv>:
    1348:	2200      	movs	r2, #0
    134a:	0843      	lsrs	r3, r0, #1
    134c:	428b      	cmp	r3, r1
    134e:	d374      	bcc.n	143a <__aeabi_uidiv+0xf2>
    1350:	0903      	lsrs	r3, r0, #4
    1352:	428b      	cmp	r3, r1
    1354:	d35f      	bcc.n	1416 <__aeabi_uidiv+0xce>
    1356:	0a03      	lsrs	r3, r0, #8
    1358:	428b      	cmp	r3, r1
    135a:	d344      	bcc.n	13e6 <__aeabi_uidiv+0x9e>
    135c:	0b03      	lsrs	r3, r0, #12
    135e:	428b      	cmp	r3, r1
    1360:	d328      	bcc.n	13b4 <__aeabi_uidiv+0x6c>
    1362:	0c03      	lsrs	r3, r0, #16
    1364:	428b      	cmp	r3, r1
    1366:	d30d      	bcc.n	1384 <__aeabi_uidiv+0x3c>
    1368:	22ff      	movs	r2, #255	; 0xff
    136a:	0209      	lsls	r1, r1, #8
    136c:	ba12      	rev	r2, r2
    136e:	0c03      	lsrs	r3, r0, #16
    1370:	428b      	cmp	r3, r1
    1372:	d302      	bcc.n	137a <__aeabi_uidiv+0x32>
    1374:	1212      	asrs	r2, r2, #8
    1376:	0209      	lsls	r1, r1, #8
    1378:	d065      	beq.n	1446 <__aeabi_uidiv+0xfe>
    137a:	0b03      	lsrs	r3, r0, #12
    137c:	428b      	cmp	r3, r1
    137e:	d319      	bcc.n	13b4 <__aeabi_uidiv+0x6c>
    1380:	e000      	b.n	1384 <__aeabi_uidiv+0x3c>
    1382:	0a09      	lsrs	r1, r1, #8
    1384:	0bc3      	lsrs	r3, r0, #15
    1386:	428b      	cmp	r3, r1
    1388:	d301      	bcc.n	138e <__aeabi_uidiv+0x46>
    138a:	03cb      	lsls	r3, r1, #15
    138c:	1ac0      	subs	r0, r0, r3
    138e:	4152      	adcs	r2, r2
    1390:	0b83      	lsrs	r3, r0, #14
    1392:	428b      	cmp	r3, r1
    1394:	d301      	bcc.n	139a <__aeabi_uidiv+0x52>
    1396:	038b      	lsls	r3, r1, #14
    1398:	1ac0      	subs	r0, r0, r3
    139a:	4152      	adcs	r2, r2
    139c:	0b43      	lsrs	r3, r0, #13
    139e:	428b      	cmp	r3, r1
    13a0:	d301      	bcc.n	13a6 <__aeabi_uidiv+0x5e>
    13a2:	034b      	lsls	r3, r1, #13
    13a4:	1ac0      	subs	r0, r0, r3
    13a6:	4152      	adcs	r2, r2
    13a8:	0b03      	lsrs	r3, r0, #12
    13aa:	428b      	cmp	r3, r1
    13ac:	d301      	bcc.n	13b2 <__aeabi_uidiv+0x6a>
    13ae:	030b      	lsls	r3, r1, #12
    13b0:	1ac0      	subs	r0, r0, r3
    13b2:	4152      	adcs	r2, r2
    13b4:	0ac3      	lsrs	r3, r0, #11
    13b6:	428b      	cmp	r3, r1
    13b8:	d301      	bcc.n	13be <__aeabi_uidiv+0x76>
    13ba:	02cb      	lsls	r3, r1, #11
    13bc:	1ac0      	subs	r0, r0, r3
    13be:	4152      	adcs	r2, r2
    13c0:	0a83      	lsrs	r3, r0, #10
    13c2:	428b      	cmp	r3, r1
    13c4:	d301      	bcc.n	13ca <__aeabi_uidiv+0x82>
    13c6:	028b      	lsls	r3, r1, #10
    13c8:	1ac0      	subs	r0, r0, r3
    13ca:	4152      	adcs	r2, r2
    13cc:	0a43      	lsrs	r3, r0, #9
    13ce:	428b      	cmp	r3, r1
    13d0:	d301      	bcc.n	13d6 <__aeabi_uidiv+0x8e>
    13d2:	024b      	lsls	r3, r1, #9
    13d4:	1ac0      	subs	r0, r0, r3
    13d6:	4152      	adcs	r2, r2
    13d8:	0a03      	lsrs	r3, r0, #8
    13da:	428b      	cmp	r3, r1
    13dc:	d301      	bcc.n	13e2 <__aeabi_uidiv+0x9a>
    13de:	020b      	lsls	r3, r1, #8
    13e0:	1ac0      	subs	r0, r0, r3
    13e2:	4152      	adcs	r2, r2
    13e4:	d2cd      	bcs.n	1382 <__aeabi_uidiv+0x3a>
    13e6:	09c3      	lsrs	r3, r0, #7
    13e8:	428b      	cmp	r3, r1
    13ea:	d301      	bcc.n	13f0 <__aeabi_uidiv+0xa8>
    13ec:	01cb      	lsls	r3, r1, #7
    13ee:	1ac0      	subs	r0, r0, r3
    13f0:	4152      	adcs	r2, r2
    13f2:	0983      	lsrs	r3, r0, #6
    13f4:	428b      	cmp	r3, r1
    13f6:	d301      	bcc.n	13fc <__aeabi_uidiv+0xb4>
    13f8:	018b      	lsls	r3, r1, #6
    13fa:	1ac0      	subs	r0, r0, r3
    13fc:	4152      	adcs	r2, r2
    13fe:	0943      	lsrs	r3, r0, #5
    1400:	428b      	cmp	r3, r1
    1402:	d301      	bcc.n	1408 <__aeabi_uidiv+0xc0>
    1404:	014b      	lsls	r3, r1, #5
    1406:	1ac0      	subs	r0, r0, r3
    1408:	4152      	adcs	r2, r2
    140a:	0903      	lsrs	r3, r0, #4
    140c:	428b      	cmp	r3, r1
    140e:	d301      	bcc.n	1414 <__aeabi_uidiv+0xcc>
    1410:	010b      	lsls	r3, r1, #4
    1412:	1ac0      	subs	r0, r0, r3
    1414:	4152      	adcs	r2, r2
    1416:	08c3      	lsrs	r3, r0, #3
    1418:	428b      	cmp	r3, r1
    141a:	d301      	bcc.n	1420 <__aeabi_uidiv+0xd8>
    141c:	00cb      	lsls	r3, r1, #3
    141e:	1ac0      	subs	r0, r0, r3
    1420:	4152      	adcs	r2, r2
    1422:	0883      	lsrs	r3, r0, #2
    1424:	428b      	cmp	r3, r1
    1426:	d301      	bcc.n	142c <__aeabi_uidiv+0xe4>
    1428:	008b      	lsls	r3, r1, #2
    142a:	1ac0      	subs	r0, r0, r3
    142c:	4152      	adcs	r2, r2
    142e:	0843      	lsrs	r3, r0, #1
    1430:	428b      	cmp	r3, r1
    1432:	d301      	bcc.n	1438 <__aeabi_uidiv+0xf0>
    1434:	004b      	lsls	r3, r1, #1
    1436:	1ac0      	subs	r0, r0, r3
    1438:	4152      	adcs	r2, r2
    143a:	1a41      	subs	r1, r0, r1
    143c:	d200      	bcs.n	1440 <__aeabi_uidiv+0xf8>
    143e:	4601      	mov	r1, r0
    1440:	4152      	adcs	r2, r2
    1442:	4610      	mov	r0, r2
    1444:	4770      	bx	lr
    1446:	e7ff      	b.n	1448 <__aeabi_uidiv+0x100>
    1448:	b501      	push	{r0, lr}
    144a:	2000      	movs	r0, #0
    144c:	f000 f8f0 	bl	1630 <__aeabi_idiv0>
    1450:	bd02      	pop	{r1, pc}
    1452:	46c0      	nop			; (mov r8, r8)

00001454 <__aeabi_uidivmod>:
    1454:	2900      	cmp	r1, #0
    1456:	d0f7      	beq.n	1448 <__aeabi_uidiv+0x100>
    1458:	e776      	b.n	1348 <__aeabi_uidiv>
    145a:	4770      	bx	lr

0000145c <__aeabi_idiv>:
    145c:	4603      	mov	r3, r0
    145e:	430b      	orrs	r3, r1
    1460:	d47f      	bmi.n	1562 <__aeabi_idiv+0x106>
    1462:	2200      	movs	r2, #0
    1464:	0843      	lsrs	r3, r0, #1
    1466:	428b      	cmp	r3, r1
    1468:	d374      	bcc.n	1554 <__aeabi_idiv+0xf8>
    146a:	0903      	lsrs	r3, r0, #4
    146c:	428b      	cmp	r3, r1
    146e:	d35f      	bcc.n	1530 <__aeabi_idiv+0xd4>
    1470:	0a03      	lsrs	r3, r0, #8
    1472:	428b      	cmp	r3, r1
    1474:	d344      	bcc.n	1500 <__aeabi_idiv+0xa4>
    1476:	0b03      	lsrs	r3, r0, #12
    1478:	428b      	cmp	r3, r1
    147a:	d328      	bcc.n	14ce <__aeabi_idiv+0x72>
    147c:	0c03      	lsrs	r3, r0, #16
    147e:	428b      	cmp	r3, r1
    1480:	d30d      	bcc.n	149e <__aeabi_idiv+0x42>
    1482:	22ff      	movs	r2, #255	; 0xff
    1484:	0209      	lsls	r1, r1, #8
    1486:	ba12      	rev	r2, r2
    1488:	0c03      	lsrs	r3, r0, #16
    148a:	428b      	cmp	r3, r1
    148c:	d302      	bcc.n	1494 <__aeabi_idiv+0x38>
    148e:	1212      	asrs	r2, r2, #8
    1490:	0209      	lsls	r1, r1, #8
    1492:	d065      	beq.n	1560 <__aeabi_idiv+0x104>
    1494:	0b03      	lsrs	r3, r0, #12
    1496:	428b      	cmp	r3, r1
    1498:	d319      	bcc.n	14ce <__aeabi_idiv+0x72>
    149a:	e000      	b.n	149e <__aeabi_idiv+0x42>
    149c:	0a09      	lsrs	r1, r1, #8
    149e:	0bc3      	lsrs	r3, r0, #15
    14a0:	428b      	cmp	r3, r1
    14a2:	d301      	bcc.n	14a8 <__aeabi_idiv+0x4c>
    14a4:	03cb      	lsls	r3, r1, #15
    14a6:	1ac0      	subs	r0, r0, r3
    14a8:	4152      	adcs	r2, r2
    14aa:	0b83      	lsrs	r3, r0, #14
    14ac:	428b      	cmp	r3, r1
    14ae:	d301      	bcc.n	14b4 <__aeabi_idiv+0x58>
    14b0:	038b      	lsls	r3, r1, #14
    14b2:	1ac0      	subs	r0, r0, r3
    14b4:	4152      	adcs	r2, r2
    14b6:	0b43      	lsrs	r3, r0, #13
    14b8:	428b      	cmp	r3, r1
    14ba:	d301      	bcc.n	14c0 <__aeabi_idiv+0x64>
    14bc:	034b      	lsls	r3, r1, #13
    14be:	1ac0      	subs	r0, r0, r3
    14c0:	4152      	adcs	r2, r2
    14c2:	0b03      	lsrs	r3, r0, #12
    14c4:	428b      	cmp	r3, r1
    14c6:	d301      	bcc.n	14cc <__aeabi_idiv+0x70>
    14c8:	030b      	lsls	r3, r1, #12
    14ca:	1ac0      	subs	r0, r0, r3
    14cc:	4152      	adcs	r2, r2
    14ce:	0ac3      	lsrs	r3, r0, #11
    14d0:	428b      	cmp	r3, r1
    14d2:	d301      	bcc.n	14d8 <__aeabi_idiv+0x7c>
    14d4:	02cb      	lsls	r3, r1, #11
    14d6:	1ac0      	subs	r0, r0, r3
    14d8:	4152      	adcs	r2, r2
    14da:	0a83      	lsrs	r3, r0, #10
    14dc:	428b      	cmp	r3, r1
    14de:	d301      	bcc.n	14e4 <__aeabi_idiv+0x88>
    14e0:	028b      	lsls	r3, r1, #10
    14e2:	1ac0      	subs	r0, r0, r3
    14e4:	4152      	adcs	r2, r2
    14e6:	0a43      	lsrs	r3, r0, #9
    14e8:	428b      	cmp	r3, r1
    14ea:	d301      	bcc.n	14f0 <__aeabi_idiv+0x94>
    14ec:	024b      	lsls	r3, r1, #9
    14ee:	1ac0      	subs	r0, r0, r3
    14f0:	4152      	adcs	r2, r2
    14f2:	0a03      	lsrs	r3, r0, #8
    14f4:	428b      	cmp	r3, r1
    14f6:	d301      	bcc.n	14fc <__aeabi_idiv+0xa0>
    14f8:	020b      	lsls	r3, r1, #8
    14fa:	1ac0      	subs	r0, r0, r3
    14fc:	4152      	adcs	r2, r2
    14fe:	d2cd      	bcs.n	149c <__aeabi_idiv+0x40>
    1500:	09c3      	lsrs	r3, r0, #7
    1502:	428b      	cmp	r3, r1
    1504:	d301      	bcc.n	150a <__aeabi_idiv+0xae>
    1506:	01cb      	lsls	r3, r1, #7
    1508:	1ac0      	subs	r0, r0, r3
    150a:	4152      	adcs	r2, r2
    150c:	0983      	lsrs	r3, r0, #6
    150e:	428b      	cmp	r3, r1
    1510:	d301      	bcc.n	1516 <__aeabi_idiv+0xba>
    1512:	018b      	lsls	r3, r1, #6
    1514:	1ac0      	subs	r0, r0, r3
    1516:	4152      	adcs	r2, r2
    1518:	0943      	lsrs	r3, r0, #5
    151a:	428b      	cmp	r3, r1
    151c:	d301      	bcc.n	1522 <__aeabi_idiv+0xc6>
    151e:	014b      	lsls	r3, r1, #5
    1520:	1ac0      	subs	r0, r0, r3
    1522:	4152      	adcs	r2, r2
    1524:	0903      	lsrs	r3, r0, #4
    1526:	428b      	cmp	r3, r1
    1528:	d301      	bcc.n	152e <__aeabi_idiv+0xd2>
    152a:	010b      	lsls	r3, r1, #4
    152c:	1ac0      	subs	r0, r0, r3
    152e:	4152      	adcs	r2, r2
    1530:	08c3      	lsrs	r3, r0, #3
    1532:	428b      	cmp	r3, r1
    1534:	d301      	bcc.n	153a <__aeabi_idiv+0xde>
    1536:	00cb      	lsls	r3, r1, #3
    1538:	1ac0      	subs	r0, r0, r3
    153a:	4152      	adcs	r2, r2
    153c:	0883      	lsrs	r3, r0, #2
    153e:	428b      	cmp	r3, r1
    1540:	d301      	bcc.n	1546 <__aeabi_idiv+0xea>
    1542:	008b      	lsls	r3, r1, #2
    1544:	1ac0      	subs	r0, r0, r3
    1546:	4152      	adcs	r2, r2
    1548:	0843      	lsrs	r3, r0, #1
    154a:	428b      	cmp	r3, r1
    154c:	d301      	bcc.n	1552 <__aeabi_idiv+0xf6>
    154e:	004b      	lsls	r3, r1, #1
    1550:	1ac0      	subs	r0, r0, r3
    1552:	4152      	adcs	r2, r2
    1554:	1a41      	subs	r1, r0, r1
    1556:	d200      	bcs.n	155a <__aeabi_idiv+0xfe>
    1558:	4601      	mov	r1, r0
    155a:	4152      	adcs	r2, r2
    155c:	4610      	mov	r0, r2
    155e:	4770      	bx	lr
    1560:	e05d      	b.n	161e <__aeabi_idiv+0x1c2>
    1562:	0fca      	lsrs	r2, r1, #31
    1564:	d000      	beq.n	1568 <__aeabi_idiv+0x10c>
    1566:	4249      	negs	r1, r1
    1568:	1003      	asrs	r3, r0, #32
    156a:	d300      	bcc.n	156e <__aeabi_idiv+0x112>
    156c:	4240      	negs	r0, r0
    156e:	4053      	eors	r3, r2
    1570:	2200      	movs	r2, #0
    1572:	469c      	mov	ip, r3
    1574:	0903      	lsrs	r3, r0, #4
    1576:	428b      	cmp	r3, r1
    1578:	d32d      	bcc.n	15d6 <__aeabi_idiv+0x17a>
    157a:	0a03      	lsrs	r3, r0, #8
    157c:	428b      	cmp	r3, r1
    157e:	d312      	bcc.n	15a6 <__aeabi_idiv+0x14a>
    1580:	22fc      	movs	r2, #252	; 0xfc
    1582:	0189      	lsls	r1, r1, #6
    1584:	ba12      	rev	r2, r2
    1586:	0a03      	lsrs	r3, r0, #8
    1588:	428b      	cmp	r3, r1
    158a:	d30c      	bcc.n	15a6 <__aeabi_idiv+0x14a>
    158c:	0189      	lsls	r1, r1, #6
    158e:	1192      	asrs	r2, r2, #6
    1590:	428b      	cmp	r3, r1
    1592:	d308      	bcc.n	15a6 <__aeabi_idiv+0x14a>
    1594:	0189      	lsls	r1, r1, #6
    1596:	1192      	asrs	r2, r2, #6
    1598:	428b      	cmp	r3, r1
    159a:	d304      	bcc.n	15a6 <__aeabi_idiv+0x14a>
    159c:	0189      	lsls	r1, r1, #6
    159e:	d03a      	beq.n	1616 <__aeabi_idiv+0x1ba>
    15a0:	1192      	asrs	r2, r2, #6
    15a2:	e000      	b.n	15a6 <__aeabi_idiv+0x14a>
    15a4:	0989      	lsrs	r1, r1, #6
    15a6:	09c3      	lsrs	r3, r0, #7
    15a8:	428b      	cmp	r3, r1
    15aa:	d301      	bcc.n	15b0 <__aeabi_idiv+0x154>
    15ac:	01cb      	lsls	r3, r1, #7
    15ae:	1ac0      	subs	r0, r0, r3
    15b0:	4152      	adcs	r2, r2
    15b2:	0983      	lsrs	r3, r0, #6
    15b4:	428b      	cmp	r3, r1
    15b6:	d301      	bcc.n	15bc <__aeabi_idiv+0x160>
    15b8:	018b      	lsls	r3, r1, #6
    15ba:	1ac0      	subs	r0, r0, r3
    15bc:	4152      	adcs	r2, r2
    15be:	0943      	lsrs	r3, r0, #5
    15c0:	428b      	cmp	r3, r1
    15c2:	d301      	bcc.n	15c8 <__aeabi_idiv+0x16c>
    15c4:	014b      	lsls	r3, r1, #5
    15c6:	1ac0      	subs	r0, r0, r3
    15c8:	4152      	adcs	r2, r2
    15ca:	0903      	lsrs	r3, r0, #4
    15cc:	428b      	cmp	r3, r1
    15ce:	d301      	bcc.n	15d4 <__aeabi_idiv+0x178>
    15d0:	010b      	lsls	r3, r1, #4
    15d2:	1ac0      	subs	r0, r0, r3
    15d4:	4152      	adcs	r2, r2
    15d6:	08c3      	lsrs	r3, r0, #3
    15d8:	428b      	cmp	r3, r1
    15da:	d301      	bcc.n	15e0 <__aeabi_idiv+0x184>
    15dc:	00cb      	lsls	r3, r1, #3
    15de:	1ac0      	subs	r0, r0, r3
    15e0:	4152      	adcs	r2, r2
    15e2:	0883      	lsrs	r3, r0, #2
    15e4:	428b      	cmp	r3, r1
    15e6:	d301      	bcc.n	15ec <__aeabi_idiv+0x190>
    15e8:	008b      	lsls	r3, r1, #2
    15ea:	1ac0      	subs	r0, r0, r3
    15ec:	4152      	adcs	r2, r2
    15ee:	d2d9      	bcs.n	15a4 <__aeabi_idiv+0x148>
    15f0:	0843      	lsrs	r3, r0, #1
    15f2:	428b      	cmp	r3, r1
    15f4:	d301      	bcc.n	15fa <__aeabi_idiv+0x19e>
    15f6:	004b      	lsls	r3, r1, #1
    15f8:	1ac0      	subs	r0, r0, r3
    15fa:	4152      	adcs	r2, r2
    15fc:	1a41      	subs	r1, r0, r1
    15fe:	d200      	bcs.n	1602 <__aeabi_idiv+0x1a6>
    1600:	4601      	mov	r1, r0
    1602:	4663      	mov	r3, ip
    1604:	4152      	adcs	r2, r2
    1606:	105b      	asrs	r3, r3, #1
    1608:	4610      	mov	r0, r2
    160a:	d301      	bcc.n	1610 <__aeabi_idiv+0x1b4>
    160c:	4240      	negs	r0, r0
    160e:	2b00      	cmp	r3, #0
    1610:	d500      	bpl.n	1614 <__aeabi_idiv+0x1b8>
    1612:	4249      	negs	r1, r1
    1614:	4770      	bx	lr
    1616:	4663      	mov	r3, ip
    1618:	105b      	asrs	r3, r3, #1
    161a:	d300      	bcc.n	161e <__aeabi_idiv+0x1c2>
    161c:	4240      	negs	r0, r0
    161e:	b501      	push	{r0, lr}
    1620:	2000      	movs	r0, #0
    1622:	f000 f805 	bl	1630 <__aeabi_idiv0>
    1626:	bd02      	pop	{r1, pc}

00001628 <__aeabi_idivmod>:
    1628:	2900      	cmp	r1, #0
    162a:	d0f8      	beq.n	161e <__aeabi_idiv+0x1c2>
    162c:	e716      	b.n	145c <__aeabi_idiv>
    162e:	4770      	bx	lr

00001630 <__aeabi_idiv0>:
    1630:	4770      	bx	lr
    1632:	46c0      	nop			; (mov r8, r8)

00001634 <__aeabi_lmul>:
    1634:	b5f0      	push	{r4, r5, r6, r7, lr}
    1636:	464f      	mov	r7, r9
    1638:	4646      	mov	r6, r8
    163a:	b4c0      	push	{r6, r7}
    163c:	0416      	lsls	r6, r2, #16
    163e:	0c36      	lsrs	r6, r6, #16
    1640:	4699      	mov	r9, r3
    1642:	0033      	movs	r3, r6
    1644:	0405      	lsls	r5, r0, #16
    1646:	0c2c      	lsrs	r4, r5, #16
    1648:	0c07      	lsrs	r7, r0, #16
    164a:	0c15      	lsrs	r5, r2, #16
    164c:	4363      	muls	r3, r4
    164e:	437e      	muls	r6, r7
    1650:	436f      	muls	r7, r5
    1652:	4365      	muls	r5, r4
    1654:	0c1c      	lsrs	r4, r3, #16
    1656:	19ad      	adds	r5, r5, r6
    1658:	1964      	adds	r4, r4, r5
    165a:	469c      	mov	ip, r3
    165c:	42a6      	cmp	r6, r4
    165e:	d903      	bls.n	1668 <__aeabi_lmul+0x34>
    1660:	2380      	movs	r3, #128	; 0x80
    1662:	025b      	lsls	r3, r3, #9
    1664:	4698      	mov	r8, r3
    1666:	4447      	add	r7, r8
    1668:	4663      	mov	r3, ip
    166a:	0c25      	lsrs	r5, r4, #16
    166c:	19ef      	adds	r7, r5, r7
    166e:	041d      	lsls	r5, r3, #16
    1670:	464b      	mov	r3, r9
    1672:	434a      	muls	r2, r1
    1674:	4343      	muls	r3, r0
    1676:	0c2d      	lsrs	r5, r5, #16
    1678:	0424      	lsls	r4, r4, #16
    167a:	1964      	adds	r4, r4, r5
    167c:	1899      	adds	r1, r3, r2
    167e:	19c9      	adds	r1, r1, r7
    1680:	0020      	movs	r0, r4
    1682:	bc0c      	pop	{r2, r3}
    1684:	4690      	mov	r8, r2
    1686:	4699      	mov	r9, r3
    1688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    168a:	46c0      	nop			; (mov r8, r8)

0000168c <__libc_init_array>:
    168c:	4b0e      	ldr	r3, [pc, #56]	; (16c8 <__libc_init_array+0x3c>)
    168e:	b570      	push	{r4, r5, r6, lr}
    1690:	2500      	movs	r5, #0
    1692:	001e      	movs	r6, r3
    1694:	4c0d      	ldr	r4, [pc, #52]	; (16cc <__libc_init_array+0x40>)
    1696:	1ae4      	subs	r4, r4, r3
    1698:	10a4      	asrs	r4, r4, #2
    169a:	42a5      	cmp	r5, r4
    169c:	d004      	beq.n	16a8 <__libc_init_array+0x1c>
    169e:	00ab      	lsls	r3, r5, #2
    16a0:	58f3      	ldr	r3, [r6, r3]
    16a2:	4798      	blx	r3
    16a4:	3501      	adds	r5, #1
    16a6:	e7f8      	b.n	169a <__libc_init_array+0xe>
    16a8:	f000 f908 	bl	18bc <_init>
    16ac:	4b08      	ldr	r3, [pc, #32]	; (16d0 <__libc_init_array+0x44>)
    16ae:	2500      	movs	r5, #0
    16b0:	001e      	movs	r6, r3
    16b2:	4c08      	ldr	r4, [pc, #32]	; (16d4 <__libc_init_array+0x48>)
    16b4:	1ae4      	subs	r4, r4, r3
    16b6:	10a4      	asrs	r4, r4, #2
    16b8:	42a5      	cmp	r5, r4
    16ba:	d004      	beq.n	16c6 <__libc_init_array+0x3a>
    16bc:	00ab      	lsls	r3, r5, #2
    16be:	58f3      	ldr	r3, [r6, r3]
    16c0:	4798      	blx	r3
    16c2:	3501      	adds	r5, #1
    16c4:	e7f8      	b.n	16b8 <__libc_init_array+0x2c>
    16c6:	bd70      	pop	{r4, r5, r6, pc}
    16c8:	000018c8 	.word	0x000018c8
    16cc:	000018c8 	.word	0x000018c8
    16d0:	000018c8 	.word	0x000018c8
    16d4:	000018cc 	.word	0x000018cc

000016d8 <memset>:
    16d8:	0003      	movs	r3, r0
    16da:	1882      	adds	r2, r0, r2
    16dc:	4293      	cmp	r3, r2
    16de:	d002      	beq.n	16e6 <memset+0xe>
    16e0:	7019      	strb	r1, [r3, #0]
    16e2:	3301      	adds	r3, #1
    16e4:	e7fa      	b.n	16dc <memset+0x4>
    16e6:	4770      	bx	lr

000016e8 <rand>:
    16e8:	4b15      	ldr	r3, [pc, #84]	; (1740 <rand+0x58>)
    16ea:	b510      	push	{r4, lr}
    16ec:	681c      	ldr	r4, [r3, #0]
    16ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    16f0:	2b00      	cmp	r3, #0
    16f2:	d115      	bne.n	1720 <rand+0x38>
    16f4:	2018      	movs	r0, #24
    16f6:	f000 f833 	bl	1760 <malloc>
    16fa:	4b12      	ldr	r3, [pc, #72]	; (1744 <rand+0x5c>)
    16fc:	63a0      	str	r0, [r4, #56]	; 0x38
    16fe:	8003      	strh	r3, [r0, #0]
    1700:	4b11      	ldr	r3, [pc, #68]	; (1748 <rand+0x60>)
    1702:	2201      	movs	r2, #1
    1704:	8043      	strh	r3, [r0, #2]
    1706:	4b11      	ldr	r3, [pc, #68]	; (174c <rand+0x64>)
    1708:	8083      	strh	r3, [r0, #4]
    170a:	4b11      	ldr	r3, [pc, #68]	; (1750 <rand+0x68>)
    170c:	80c3      	strh	r3, [r0, #6]
    170e:	4b11      	ldr	r3, [pc, #68]	; (1754 <rand+0x6c>)
    1710:	8103      	strh	r3, [r0, #8]
    1712:	2305      	movs	r3, #5
    1714:	8143      	strh	r3, [r0, #10]
    1716:	3306      	adds	r3, #6
    1718:	8183      	strh	r3, [r0, #12]
    171a:	2300      	movs	r3, #0
    171c:	6102      	str	r2, [r0, #16]
    171e:	6143      	str	r3, [r0, #20]
    1720:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    1722:	4a0d      	ldr	r2, [pc, #52]	; (1758 <rand+0x70>)
    1724:	6920      	ldr	r0, [r4, #16]
    1726:	6961      	ldr	r1, [r4, #20]
    1728:	4b0c      	ldr	r3, [pc, #48]	; (175c <rand+0x74>)
    172a:	f7ff ff83 	bl	1634 <__aeabi_lmul>
    172e:	2201      	movs	r2, #1
    1730:	2300      	movs	r3, #0
    1732:	1880      	adds	r0, r0, r2
    1734:	4159      	adcs	r1, r3
    1736:	6120      	str	r0, [r4, #16]
    1738:	6161      	str	r1, [r4, #20]
    173a:	0048      	lsls	r0, r1, #1
    173c:	0840      	lsrs	r0, r0, #1
    173e:	bd10      	pop	{r4, pc}
    1740:	2000006c 	.word	0x2000006c
    1744:	0000330e 	.word	0x0000330e
    1748:	ffffabcd 	.word	0xffffabcd
    174c:	00001234 	.word	0x00001234
    1750:	ffffe66d 	.word	0xffffe66d
    1754:	ffffdeec 	.word	0xffffdeec
    1758:	4c957f2d 	.word	0x4c957f2d
    175c:	5851f42d 	.word	0x5851f42d

00001760 <malloc>:
    1760:	b510      	push	{r4, lr}
    1762:	4b03      	ldr	r3, [pc, #12]	; (1770 <malloc+0x10>)
    1764:	0001      	movs	r1, r0
    1766:	6818      	ldr	r0, [r3, #0]
    1768:	f000 f804 	bl	1774 <_malloc_r>
    176c:	bd10      	pop	{r4, pc}
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	2000006c 	.word	0x2000006c

00001774 <_malloc_r>:
    1774:	2303      	movs	r3, #3
    1776:	b570      	push	{r4, r5, r6, lr}
    1778:	1ccd      	adds	r5, r1, #3
    177a:	439d      	bics	r5, r3
    177c:	3508      	adds	r5, #8
    177e:	0006      	movs	r6, r0
    1780:	2d0c      	cmp	r5, #12
    1782:	d201      	bcs.n	1788 <_malloc_r+0x14>
    1784:	250c      	movs	r5, #12
    1786:	e005      	b.n	1794 <_malloc_r+0x20>
    1788:	2d00      	cmp	r5, #0
    178a:	da03      	bge.n	1794 <_malloc_r+0x20>
    178c:	230c      	movs	r3, #12
    178e:	2000      	movs	r0, #0
    1790:	6033      	str	r3, [r6, #0]
    1792:	e040      	b.n	1816 <_malloc_r+0xa2>
    1794:	42a9      	cmp	r1, r5
    1796:	d8f9      	bhi.n	178c <_malloc_r+0x18>
    1798:	4b1f      	ldr	r3, [pc, #124]	; (1818 <_malloc_r+0xa4>)
    179a:	681c      	ldr	r4, [r3, #0]
    179c:	001a      	movs	r2, r3
    179e:	0021      	movs	r1, r4
    17a0:	2900      	cmp	r1, #0
    17a2:	d013      	beq.n	17cc <_malloc_r+0x58>
    17a4:	680b      	ldr	r3, [r1, #0]
    17a6:	1b5b      	subs	r3, r3, r5
    17a8:	d40d      	bmi.n	17c6 <_malloc_r+0x52>
    17aa:	2b0b      	cmp	r3, #11
    17ac:	d902      	bls.n	17b4 <_malloc_r+0x40>
    17ae:	600b      	str	r3, [r1, #0]
    17b0:	18cc      	adds	r4, r1, r3
    17b2:	e01e      	b.n	17f2 <_malloc_r+0x7e>
    17b4:	428c      	cmp	r4, r1
    17b6:	d102      	bne.n	17be <_malloc_r+0x4a>
    17b8:	6863      	ldr	r3, [r4, #4]
    17ba:	6013      	str	r3, [r2, #0]
    17bc:	e01a      	b.n	17f4 <_malloc_r+0x80>
    17be:	684b      	ldr	r3, [r1, #4]
    17c0:	6063      	str	r3, [r4, #4]
    17c2:	000c      	movs	r4, r1
    17c4:	e016      	b.n	17f4 <_malloc_r+0x80>
    17c6:	000c      	movs	r4, r1
    17c8:	6849      	ldr	r1, [r1, #4]
    17ca:	e7e9      	b.n	17a0 <_malloc_r+0x2c>
    17cc:	4c13      	ldr	r4, [pc, #76]	; (181c <_malloc_r+0xa8>)
    17ce:	6823      	ldr	r3, [r4, #0]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d103      	bne.n	17dc <_malloc_r+0x68>
    17d4:	0030      	movs	r0, r6
    17d6:	f000 f823 	bl	1820 <_sbrk_r>
    17da:	6020      	str	r0, [r4, #0]
    17dc:	0029      	movs	r1, r5
    17de:	0030      	movs	r0, r6
    17e0:	f000 f81e 	bl	1820 <_sbrk_r>
    17e4:	1c43      	adds	r3, r0, #1
    17e6:	d0d1      	beq.n	178c <_malloc_r+0x18>
    17e8:	2303      	movs	r3, #3
    17ea:	1cc4      	adds	r4, r0, #3
    17ec:	439c      	bics	r4, r3
    17ee:	42a0      	cmp	r0, r4
    17f0:	d10a      	bne.n	1808 <_malloc_r+0x94>
    17f2:	6025      	str	r5, [r4, #0]
    17f4:	0020      	movs	r0, r4
    17f6:	2207      	movs	r2, #7
    17f8:	300b      	adds	r0, #11
    17fa:	1d23      	adds	r3, r4, #4
    17fc:	4390      	bics	r0, r2
    17fe:	1ac3      	subs	r3, r0, r3
    1800:	d009      	beq.n	1816 <_malloc_r+0xa2>
    1802:	425a      	negs	r2, r3
    1804:	50e2      	str	r2, [r4, r3]
    1806:	e006      	b.n	1816 <_malloc_r+0xa2>
    1808:	1a21      	subs	r1, r4, r0
    180a:	0030      	movs	r0, r6
    180c:	f000 f808 	bl	1820 <_sbrk_r>
    1810:	1c43      	adds	r3, r0, #1
    1812:	d1ee      	bne.n	17f2 <_malloc_r+0x7e>
    1814:	e7ba      	b.n	178c <_malloc_r+0x18>
    1816:	bd70      	pop	{r4, r5, r6, pc}
    1818:	200000e8 	.word	0x200000e8
    181c:	200000e4 	.word	0x200000e4

00001820 <_sbrk_r>:
    1820:	2300      	movs	r3, #0
    1822:	b570      	push	{r4, r5, r6, lr}
    1824:	4c06      	ldr	r4, [pc, #24]	; (1840 <_sbrk_r+0x20>)
    1826:	0005      	movs	r5, r0
    1828:	0008      	movs	r0, r1
    182a:	6023      	str	r3, [r4, #0]
    182c:	f7ff fbd6 	bl	fdc <_sbrk>
    1830:	1c43      	adds	r3, r0, #1
    1832:	d103      	bne.n	183c <_sbrk_r+0x1c>
    1834:	6823      	ldr	r3, [r4, #0]
    1836:	2b00      	cmp	r3, #0
    1838:	d000      	beq.n	183c <_sbrk_r+0x1c>
    183a:	602b      	str	r3, [r5, #0]
    183c:	bd70      	pop	{r4, r5, r6, pc}
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	20000104 	.word	0x20000104
    1844:	42000800 	.word	0x42000800
    1848:	42000c00 	.word	0x42000c00
    184c:	42001000 	.word	0x42001000
    1850:	00000722 	.word	0x00000722
    1854:	0000071e 	.word	0x0000071e
    1858:	0000071e 	.word	0x0000071e
    185c:	0000077c 	.word	0x0000077c
    1860:	0000077c 	.word	0x0000077c
    1864:	00000736 	.word	0x00000736
    1868:	00000728 	.word	0x00000728
    186c:	0000073c 	.word	0x0000073c
    1870:	0000076a 	.word	0x0000076a
    1874:	00000914 	.word	0x00000914
    1878:	000008f4 	.word	0x000008f4
    187c:	000008f4 	.word	0x000008f4
    1880:	00000980 	.word	0x00000980
    1884:	00000906 	.word	0x00000906
    1888:	00000922 	.word	0x00000922
    188c:	000008f8 	.word	0x000008f8
    1890:	00000930 	.word	0x00000930
    1894:	00000970 	.word	0x00000970

00001898 <bits>:
    1898:	09260924 09360934 09a609a4 09b609b4     $.&.4.6.........
    18a8:	0d260d24 0d360d34 0da60da4 0db60db4     $.&.4.6.........
    18b8:	00000043                                C...

000018bc <_init>:
    18bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    18c2:	bc08      	pop	{r3}
    18c4:	469e      	mov	lr, r3
    18c6:	4770      	bx	lr

000018c8 <__init_array_start>:
    18c8:	000000b5 	.word	0x000000b5

000018cc <_fini>:
    18cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    18d2:	bc08      	pop	{r3}
    18d4:	469e      	mov	lr, r3
    18d6:	4770      	bx	lr

000018d8 <__fini_array_start>:
    18d8:	0000008d 	.word	0x0000008d
